{"ast":null,"code":"var _jsxFileName = \"/Users/new/Downloads/Projects/online-radio-station/src/components/Player.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport playlistService from \"../services/playlistService\";\nimport '../styles/player.css'; // Ensure this path is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Player() {\n  _s();\n  const [playlist, setPlaylist] = useState([]);\n  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const audioRef = useRef(null);\n  const originalBodyStyleRef = useRef(null); // To store original body style\n\n  // Load playlist\n  useEffect(() => {\n    const tracks = playlistService.getPlaylist();\n    setPlaylist(tracks);\n    setIsLoading(false);\n  }, []);\n\n  // Handle track loading and playback\n  useEffect(() => {\n    if (playlist.length === 0 || isLoading) return;\n    const audio = audioRef.current;\n    if (!audio) return;\n    const trackUrl = process.env.PUBLIC_URL + playlist[currentTrackIndex].url.replace('public/', '');\n    audio.src = trackUrl;\n    audio.load();\n    const attemptAutoplay = () => {\n      audio.play().then(() => setIsPlaying(true)).catch(error => {\n        console.log(\"Autoplay prevented:\", error.message);\n        setIsPlaying(false);\n      });\n    };\n    const handleEnded = () => {\n      setCurrentTrackIndex(prev => (prev + 1) % playlist.length);\n    };\n    audio.addEventListener('ended', handleEnded);\n    // Only attempt autoplay after the audio source is set and potentially loaded\n    // Consider using 'canplay' or 'canplaythrough' events for more robust autoplay\n    const canPlayHandler = () => {\n      attemptAutoplay();\n      audio.removeEventListener('canplay', canPlayHandler); // Remove listener once triggered\n    };\n    audio.addEventListener('canplay', canPlayHandler);\n\n    // Cleanup listeners\n    return () => {\n      audio.removeEventListener('ended', handleEnded);\n      audio.removeEventListener('canplay', canPlayHandler);\n    };\n  }, [currentTrackIndex, playlist, isLoading]); // Added missing dependency\n\n  // --- Global Background Effect ---\n  useEffect(() => {\n    if (playlist.length === 0 || isLoading) return;\n    const currentTrackInfo = playlist[currentTrackIndex];\n    const artworkUrl = process.env.PUBLIC_URL + currentTrackInfo.artwork.replace('public/', '');\n\n    // Store original body style only once on component mount effectively\n    if (originalBodyStyleRef.current === null) {\n      originalBodyStyleRef.current = {\n        backgroundImage: document.body.style.backgroundImage,\n        backgroundSize: document.body.style.backgroundSize,\n        backgroundPosition: document.body.style.backgroundPosition,\n        backgroundAttachment: document.body.style.backgroundAttachment,\n        transition: document.body.style.transition,\n        minHeight: document.body.style.minHeight // Also store minHeight\n      };\n    }\n\n    // Apply new style\n    document.body.style.backgroundImage = `url(${artworkUrl})`;\n    document.body.style.backgroundSize = 'cover';\n    document.body.style.backgroundPosition = 'center center';\n    document.body.style.backgroundAttachment = 'fixed'; // Keeps background fixed during scroll\n    document.body.style.minHeight = '100vh'; // Ensure body covers viewport height\n    document.body.style.transition = 'background-image 1s ease-in-out'; // Match component transition\n\n    // Cleanup function to restore original style when component unmounts\n    return () => {\n      if (originalBodyStyleRef.current) {\n        document.body.style.backgroundImage = originalBodyStyleRef.current.backgroundImage;\n        document.body.style.backgroundSize = originalBodyStyleRef.current.backgroundSize;\n        document.body.style.backgroundPosition = originalBodyStyleRef.current.backgroundPosition;\n        document.body.style.backgroundAttachment = originalBodyStyleRef.current.backgroundAttachment;\n        document.body.style.transition = originalBodyStyleRef.current.transition;\n        document.body.style.minHeight = originalBodyStyleRef.current.minHeight;\n      }\n    };\n  }, [currentTrackIndex, playlist, isLoading]); // Re-run when track changes\n\n  // --- Event Listeners for Audio State ---\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    const handlePlay = () => setIsPlaying(true);\n    const handlePause = () => setIsPlaying(false);\n    const handleError = e => {\n      console.error(\"Audio error:\", e);\n      // Skip to next track might be too aggressive, log error first.\n      // Consider adding user feedback or a retry mechanism.\n      // setCurrentTrackIndex(prev => (prev + 1) % playlist.length);\n    };\n    audio.addEventListener('play', handlePlay);\n    audio.addEventListener('pause', handlePause);\n    audio.addEventListener('error', handleError);\n    return () => {\n      audio.removeEventListener('play', handlePlay);\n      audio.removeEventListener('pause', handlePause);\n      audio.removeEventListener('error', handleError);\n    };\n  }, [playlist.length]); // Dependencies look okay here\n\n  const togglePlay = () => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    if (isPlaying) {\n      audio.pause();\n    } else {\n      // User interaction is required to start playback programmatically sometimes\n      audio.play().catch(error => {\n        console.error(\"Playback error on toggle:\", error);\n        setIsPlaying(false); // Ensure state is correct if play fails\n      });\n    }\n    // Optimistic update removed, state is set by play/pause events now\n    // setIsPlaying(!isPlaying);\n  };\n\n  // --- Loading State ---\n  if (isLoading || playlist.length === 0) {\n    return (\n      /*#__PURE__*/\n      // Use className for styling loading state if preferred\n      _jsxDEV(\"div\", {\n        className: \"loading-container\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading player...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }, this)\n    );\n  }\n\n  // --- Render Player ---\n  // No need for currentTrackInfo/artworkUrl here, handled in effect\n  // const currentTrackInfo = playlist[currentTrackIndex];\n\n  return (\n    /*#__PURE__*/\n    // Removed inline background styles from here\n    _jsxDEV(\"div\", {\n      className: \"player-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n        ref: audioRef,\n        preload: \"metadata\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"track-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"live-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"blinking-dot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Live Now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: playlist[currentTrackIndex].title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: playlist[currentTrackIndex].artist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-controls\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: togglePlay\n          // Keep dynamic background color inline\n          ,\n          style: {\n            backgroundColor: isPlaying ? \"#ff5555\" : \"#55ff55\"\n          }\n          // Add className for common styles\n          ,\n          className: \"play-pause-button\",\n          children: isPlaying ? \"PAUSE\" : \"PLAY\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this)\n  );\n}\n_s(Player, \"hHumBdoEfqNfOZU/P0VYar7bevk=\");\n_c = Player;\nexport default Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["React","useState","useRef","useEffect","playlistService","jsxDEV","_jsxDEV","Player","_s","playlist","setPlaylist","currentTrackIndex","setCurrentTrackIndex","isPlaying","setIsPlaying","isLoading","setIsLoading","audioRef","originalBodyStyleRef","tracks","getPlaylist","length","audio","current","trackUrl","process","env","PUBLIC_URL","url","replace","src","load","attemptAutoplay","play","then","catch","error","console","log","message","handleEnded","prev","addEventListener","canPlayHandler","removeEventListener","currentTrackInfo","artworkUrl","artwork","backgroundImage","document","body","style","backgroundSize","backgroundPosition","backgroundAttachment","transition","minHeight","handlePlay","handlePause","handleError","e","togglePlay","pause","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","preload","title","artist","onClick","backgroundColor","_c","$RefreshReg$"],"sources":["/Users/new/Downloads/Projects/online-radio-station/src/components/Player.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport playlistService from \"../services/playlistService\";\nimport '../styles/player.css'; // Ensure this path is correct\n\nfunction Player() {\n    const [playlist, setPlaylist] = useState([]);\n    const [currentTrackIndex, setCurrentTrackIndex] = useState(0);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const audioRef = useRef(null);\n    const originalBodyStyleRef = useRef(null); // To store original body style\n\n    // Load playlist\n    useEffect(() => {\n        const tracks = playlistService.getPlaylist();\n        setPlaylist(tracks);\n        setIsLoading(false);\n    }, []);\n\n    // Handle track loading and playback\n    useEffect(() => {\n        if (playlist.length === 0 || isLoading) return;\n\n        const audio = audioRef.current;\n        if (!audio) return;\n\n        const trackUrl = process.env.PUBLIC_URL + playlist[currentTrackIndex].url.replace('public/', '');\n        audio.src = trackUrl;\n        audio.load();\n\n        const attemptAutoplay = () => {\n            audio.play()\n                .then(() => setIsPlaying(true))\n                .catch(error => {\n                    console.log(\"Autoplay prevented:\", error.message);\n                    setIsPlaying(false);\n                });\n        };\n\n        const handleEnded = () => {\n            setCurrentTrackIndex(prev => (prev + 1) % playlist.length);\n        };\n\n        audio.addEventListener('ended', handleEnded);\n        // Only attempt autoplay after the audio source is set and potentially loaded\n        // Consider using 'canplay' or 'canplaythrough' events for more robust autoplay\n        const canPlayHandler = () => {\n            attemptAutoplay();\n            audio.removeEventListener('canplay', canPlayHandler); // Remove listener once triggered\n        }\n        audio.addEventListener('canplay', canPlayHandler);\n\n        // Cleanup listeners\n        return () => {\n            audio.removeEventListener('ended', handleEnded);\n            audio.removeEventListener('canplay', canPlayHandler);\n        };\n    }, [currentTrackIndex, playlist, isLoading]); // Added missing dependency\n\n    // --- Global Background Effect ---\n    useEffect(() => {\n        if (playlist.length === 0 || isLoading) return;\n\n        const currentTrackInfo = playlist[currentTrackIndex];\n        const artworkUrl = process.env.PUBLIC_URL + currentTrackInfo.artwork.replace('public/', '');\n\n        // Store original body style only once on component mount effectively\n        if (originalBodyStyleRef.current === null) {\n             originalBodyStyleRef.current = {\n                backgroundImage: document.body.style.backgroundImage,\n                backgroundSize: document.body.style.backgroundSize,\n                backgroundPosition: document.body.style.backgroundPosition,\n                backgroundAttachment: document.body.style.backgroundAttachment,\n                transition: document.body.style.transition,\n                minHeight: document.body.style.minHeight, // Also store minHeight\n             };\n        }\n\n        // Apply new style\n        document.body.style.backgroundImage = `url(${artworkUrl})`;\n        document.body.style.backgroundSize = 'cover';\n        document.body.style.backgroundPosition = 'center center';\n        document.body.style.backgroundAttachment = 'fixed'; // Keeps background fixed during scroll\n        document.body.style.minHeight = '100vh'; // Ensure body covers viewport height\n        document.body.style.transition = 'background-image 1s ease-in-out'; // Match component transition\n\n        // Cleanup function to restore original style when component unmounts\n        return () => {\n            if (originalBodyStyleRef.current) {\n                document.body.style.backgroundImage = originalBodyStyleRef.current.backgroundImage;\n                document.body.style.backgroundSize = originalBodyStyleRef.current.backgroundSize;\n                document.body.style.backgroundPosition = originalBodyStyleRef.current.backgroundPosition;\n                document.body.style.backgroundAttachment = originalBodyStyleRef.current.backgroundAttachment;\n                document.body.style.transition = originalBodyStyleRef.current.transition;\n                document.body.style.minHeight = originalBodyStyleRef.current.minHeight;\n            }\n        };\n    }, [currentTrackIndex, playlist, isLoading]); // Re-run when track changes\n\n\n    // --- Event Listeners for Audio State ---\n    useEffect(() => {\n        const audio = audioRef.current;\n        if (!audio) return;\n\n        const handlePlay = () => setIsPlaying(true);\n        const handlePause = () => setIsPlaying(false);\n        const handleError = (e) => {\n            console.error(\"Audio error:\", e);\n            // Skip to next track might be too aggressive, log error first.\n            // Consider adding user feedback or a retry mechanism.\n            // setCurrentTrackIndex(prev => (prev + 1) % playlist.length);\n        };\n\n        audio.addEventListener('play', handlePlay);\n        audio.addEventListener('pause', handlePause);\n        audio.addEventListener('error', handleError);\n\n        return () => {\n            audio.removeEventListener('play', handlePlay);\n            audio.removeEventListener('pause', handlePause);\n            audio.removeEventListener('error', handleError);\n        };\n    }, [playlist.length]); // Dependencies look okay here\n\n     const togglePlay = () => {\n        const audio = audioRef.current;\n        if (!audio) return;\n\n        if (isPlaying) {\n            audio.pause();\n        } else {\n            // User interaction is required to start playback programmatically sometimes\n            audio.play().catch(error => {\n                console.error(\"Playback error on toggle:\", error);\n                setIsPlaying(false); // Ensure state is correct if play fails\n            });\n        }\n        // Optimistic update removed, state is set by play/pause events now\n        // setIsPlaying(!isPlaying);\n    };\n\n\n    // --- Loading State ---\n    if (isLoading || playlist.length === 0) {\n        return (\n            // Use className for styling loading state if preferred\n            <div className=\"loading-container\">\n                <p>Loading player...</p>\n            </div>\n        );\n    }\n\n    // --- Render Player ---\n    // No need for currentTrackInfo/artworkUrl here, handled in effect\n    // const currentTrackInfo = playlist[currentTrackIndex];\n\n    return (\n        // Removed inline background styles from here\n        <div className=\"player-container\">\n            <audio ref={audioRef} preload=\"metadata\" /> {/* Added preload */}\n\n            {/* Moved inline styles to Player.css */}\n            <div className=\"track-info\">\n                <div className=\"live-header\">\n                    <span className=\"blinking-dot\"></span>\n                    <h2>Live Now</h2>\n                </div>\n                {/* Display current track info */}\n                <h3>{playlist[currentTrackIndex].title}</h3>\n                <p>{playlist[currentTrackIndex].artist}</p>\n            </div>\n\n            {/* Moved inline styles to Player.css */}\n            <div className=\"player-controls\">\n                <button\n                    onClick={togglePlay}\n                    // Keep dynamic background color inline\n                    style={{ backgroundColor: isPlaying ? \"#ff5555\" : \"#55ff55\" }}\n                    // Add className for common styles\n                    className=\"play-pause-button\"\n                >\n                    {isPlaying ? \"PAUSE\" : \"PLAY\"}\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default Player;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}