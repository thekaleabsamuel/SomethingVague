{"ast":null,"code":"var _jsxFileName = \"/Users/new/Downloads/Projects/online-radio-station/src/components/Player.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport playlistService from \"./\"; // Import playlist service\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Player() {\n  _s();\n  const [playlist, setPlaylist] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const audioRef = useRef(null);\n\n  // Load playlist from service\n  useEffect(() => {\n    setPlaylist(playlistService.getPlaylist());\n  }, []);\n  useEffect(() => {\n    if (isPlaying && audioRef.current) {\n      audioRef.current.play();\n    } else if (audioRef.current) {\n      audioRef.current.pause();\n    }\n  }, [currentTrack, isPlaying]);\n  const togglePlay = () => {\n    setIsPlaying(!isPlaying);\n  };\n  const nextTrack = () => {\n    setCurrentTrack(prev => (prev + 1) % playlist.length);\n  };\n  if (playlist.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading playlist...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }, this);\n  }\n  const currentTrackInfo = playlist[currentTrack];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player-container\",\n    style: {\n      backgroundImage: `url(${currentTrackInfo.artwork})`,\n      backgroundSize: \"cover\",\n      backgroundPosition: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: currentTrackInfo.url,\n      onEnded: nextTrack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"track-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: currentTrackInfo.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentTrackInfo.artist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: togglePlay,\n        children: isPlaying ? \"Pause\" : \"Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextTrack,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(Player, \"aJ3R7HXbSgK/u3xFnHmXIYef7wQ=\");\n_c = Player;\nexport default Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["React","useState","useRef","useEffect","playlistService","jsxDEV","_jsxDEV","Player","_s","playlist","setPlaylist","currentTrack","setCurrentTrack","isPlaying","setIsPlaying","audioRef","getPlaylist","current","play","pause","togglePlay","nextTrack","prev","length","children","fileName","_jsxFileName","lineNumber","columnNumber","currentTrackInfo","className","style","backgroundImage","artwork","backgroundSize","backgroundPosition","ref","src","url","onEnded","title","artist","onClick","_c","$RefreshReg$"],"sources":["/Users/new/Downloads/Projects/online-radio-station/src/components/Player.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport playlistService from \"./\"; // Import playlist service\n\nfunction Player() {\n  const [playlist, setPlaylist] = useState([]);\n  const [currentTrack, setCurrentTrack] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const audioRef = useRef(null);\n\n  // Load playlist from service\n  useEffect(() => {\n    setPlaylist(playlistService.getPlaylist());\n  }, []);\n\n  useEffect(() => {\n    if (isPlaying && audioRef.current) {\n      audioRef.current.play();\n    } else if (audioRef.current) {\n      audioRef.current.pause();\n    }\n  }, [currentTrack, isPlaying]);\n\n  const togglePlay = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  const nextTrack = () => {\n    setCurrentTrack((prev) => (prev + 1) % playlist.length);\n  };\n\n  if (playlist.length === 0) {\n    return <p>Loading playlist...</p>;\n  }\n\n  const currentTrackInfo = playlist[currentTrack];\n\n  return (\n    <div \n      className=\"player-container\" \n      style={{ \n        backgroundImage: `url(${currentTrackInfo.artwork})`,\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\"\n      }}\n    >\n      <audio \n        ref={audioRef} \n        src={currentTrackInfo.url} \n        onEnded={nextTrack}\n      />\n\n      <div className=\"track-info\">\n        <h2>{currentTrackInfo.title}</h2>\n        <p>{currentTrackInfo.artist}</p>\n      </div>\n\n      <div className=\"player-controls\">\n        <button onClick={togglePlay}>\n          {isPlaying ? \"Pause\" : \"Play\"}\n        </button>\n        <button onClick={nextTrack}>Next</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Player;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,eAAe,MAAM,IAAI,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMc,QAAQ,GAAGb,MAAM,CAAC,IAAI,CAAC;;EAE7B;EACAC,SAAS,CAAC,MAAM;IACdO,WAAW,CAACN,eAAe,CAACY,WAAW,CAAC,CAAC,CAAC;EAC5C,CAAC,EAAE,EAAE,CAAC;EAENb,SAAS,CAAC,MAAM;IACd,IAAIU,SAAS,IAAIE,QAAQ,CAACE,OAAO,EAAE;MACjCF,QAAQ,CAACE,OAAO,CAACC,IAAI,CAAC,CAAC;IACzB,CAAC,MAAM,IAAIH,QAAQ,CAACE,OAAO,EAAE;MAC3BF,QAAQ,CAACE,OAAO,CAACE,KAAK,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,CAACR,YAAY,EAAEE,SAAS,CAAC,CAAC;EAE7B,MAAMO,UAAU,GAAGA,CAAA,KAAM;IACvBN,YAAY,CAAC,CAACD,SAAS,CAAC;EAC1B,CAAC;EAED,MAAMQ,SAAS,GAAGA,CAAA,KAAM;IACtBT,eAAe,CAAEU,IAAI,IAAK,CAACA,IAAI,GAAG,CAAC,IAAIb,QAAQ,CAACc,MAAM,CAAC;EACzD,CAAC;EAED,IAAId,QAAQ,CAACc,MAAM,KAAK,CAAC,EAAE;IACzB,oBAAOjB,OAAA;MAAAkB,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACnC;EAEA,MAAMC,gBAAgB,GAAGpB,QAAQ,CAACE,YAAY,CAAC;EAE/C,oBACEL,OAAA;IACEwB,SAAS,EAAC,kBAAkB;IAC5BC,KAAK,EAAE;MACLC,eAAe,EAAE,OAAOH,gBAAgB,CAACI,OAAO,GAAG;MACnDC,cAAc,EAAE,OAAO;MACvBC,kBAAkB,EAAE;IACtB,CAAE;IAAAX,QAAA,gBAEFlB,OAAA;MACE8B,GAAG,EAAErB,QAAS;MACdsB,GAAG,EAAER,gBAAgB,CAACS,GAAI;MAC1BC,OAAO,EAAElB;IAAU;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC,eAEFtB,OAAA;MAAKwB,SAAS,EAAC,YAAY;MAAAN,QAAA,gBACzBlB,OAAA;QAAAkB,QAAA,EAAKK,gBAAgB,CAACW;MAAK;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACjCtB,OAAA;QAAAkB,QAAA,EAAIK,gBAAgB,CAACY;MAAM;QAAAhB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,eAENtB,OAAA;MAAKwB,SAAS,EAAC,iBAAiB;MAAAN,QAAA,gBAC9BlB,OAAA;QAAQoC,OAAO,EAAEtB,UAAW;QAAAI,QAAA,EACzBX,SAAS,GAAG,OAAO,GAAG;MAAM;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvB,CAAC,eACTtB,OAAA;QAAQoC,OAAO,EAAErB,SAAU;QAAAG,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACpB,EAAA,CA7DQD,MAAM;AAAAoC,EAAA,GAANpC,MAAM;AA+Df,eAAeA,MAAM;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}