{"ast":null,"code":"import { useEffect, useRef, useState } from \"react\";\nimport RegionsPlugin from \"wavesurfer.js/dist/plugins/regions\";\nimport useRegionEvent from \"../hooks/useRegionEvent\";\nimport useWavesurferContext from \"../hooks/useWavesurferContext\";\nimport { UpdatableRegionProps } from \"../constants/updatableRegionProps\";\nimport useRegionPluginEvent from \"../hooks/useRegionPluginEvent\";\nexport const Region = ({\n  onOver,\n  onLeave,\n  onClick,\n  onDoubleClick,\n  onIn,\n  onOut,\n  onRemove,\n  onUpdate,\n  onUpdateEnd,\n  ...props\n}) => {\n  const [waveSurfer,, plugins] = useWavesurferContext();\n  const regionPlug = plugins.find(p => p instanceof RegionsPlugin);\n  const isRenderedCache = useRef(false);\n  const [regionRef, setRegionRef] = useState(null);\n  useEffect(() => {\n    return () => {\n      regionRef?.remove();\n    };\n  }, [regionRef]);\n  useEffect(() => {\n    // If there is a regionRef, then process update on any props update\n    regionRef?.setOptions(UpdatableRegionProps.reduce((result, prop) => {\n      if (regionRef[prop] !== props[prop]) {\n        return {\n          ...result,\n          [prop]: props[prop]\n        };\n      }\n      return result;\n    }, {\n      id: props.id\n    }));\n  }, UpdatableRegionProps.map(prop => props[prop]));\n  useEffect(() => {\n    if (!isRenderedCache.current && waveSurfer) {\n      isRenderedCache.current = true;\n      let region = regionPlug?.getRegions().find(r => r.id === props.id);\n      if (!region) {\n        region = regionPlug?.addRegion(props);\n      }\n      if (!region) return;\n      setRegionRef(region);\n    }\n    // eslint-disable-next-line\n  }, [waveSurfer, regionPlug]);\n  useRegionEvent(regionRef, \"click\", onClick);\n  useRegionEvent(regionRef, \"over\", onOver);\n  useRegionEvent(regionRef, \"leave\", onLeave);\n  useRegionEvent(regionRef, \"dblclick\", onDoubleClick);\n  useRegionPluginEvent(regionPlug, \"region-in\", onIn);\n  useRegionPluginEvent(regionPlug, \"region-out\", onOut);\n  useRegionEvent(regionRef, \"remove\", onRemove);\n  useRegionEvent(regionRef, \"update\", onUpdate);\n  useRegionEvent(regionRef, \"update-end\", onUpdateEnd);\n  return null;\n};\nexport default Region;","map":{"version":3,"names":["useEffect","useRef","useState","RegionsPlugin","useRegionEvent","useWavesurferContext","UpdatableRegionProps","useRegionPluginEvent","Region","onOver","onLeave","onClick","onDoubleClick","onIn","onOut","onRemove","onUpdate","onUpdateEnd","props","waveSurfer","plugins","regionPlug","find","p","isRenderedCache","regionRef","setRegionRef","remove","setOptions","reduce","result","prop","id","map","current","region","getRegions","r","addRegion"],"sources":["/Users/new/Downloads/Projects/online-radio-station/node_modules/wavesurfer-react/src/components/Region.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport RegionsPlugin, { Region as RegionWS, RegionParams } from \"wavesurfer.js/dist/plugins/regions\";\nimport useRegionEvent, { RegionEventListener } from \"../hooks/useRegionEvent\";\nimport useWavesurferContext from \"../hooks/useWavesurferContext\";\nimport { UpdatableRegionProps } from \"../constants/updatableRegionProps\";\nimport useRegionPluginEvent, { RegionPluginEventListener } from \"../hooks/useRegionPluginEvent\";\n\nexport interface RegionProps extends RegionParams {\n  onClick?: RegionEventListener;\n  onOver?: RegionEventListener;\n  onLeave?: RegionEventListener;\n  onDoubleClick?: RegionEventListener;\n  onIn?: RegionPluginEventListener;\n  onOut?: RegionPluginEventListener;\n  onRemove?: RegionEventListener;\n  onUpdate?: RegionEventListener;\n  onUpdateEnd?: RegionEventListener;\n  id: string;\n}\n\nexport const Region = ({\n  onOver,\n  onLeave,\n  onClick,\n  onDoubleClick,\n  onIn,\n  onOut,\n  onRemove,\n  onUpdate,\n  onUpdateEnd,\n  ...props\n}: RegionProps) => {\n  const [waveSurfer, ,plugins] = useWavesurferContext()!;\n\n  const regionPlug = plugins.find(p => p instanceof RegionsPlugin) as RegionsPlugin | undefined;\n\n  const isRenderedCache = useRef(false);\n\n  const [regionRef, setRegionRef] = useState<RegionWS | null>(null);\n\n  useEffect(() => {\n    return () => {\n      regionRef?.remove();\n    };\n  }, [regionRef]);\n\n  useEffect(\n    () => {\n      // If there is a regionRef, then process update on any props update\n      regionRef?.setOptions(UpdatableRegionProps.reduce(\n        (result, prop) => {\n          if (regionRef[prop] !== props[prop]) {\n            return {\n              ...result,\n              [prop]: props[prop],\n            };\n          }\n\n          return result;\n        },\n        { id: props.id } as Omit<RegionParams, 'minLength' | 'maxLength'>\n      ));\n    },\n    UpdatableRegionProps.map((prop) => props[prop])\n  );\n\n  useEffect(() => {\n    if (!isRenderedCache.current && waveSurfer) {\n      isRenderedCache.current = true;\n\n      let region = regionPlug?.getRegions().find(r => r.id === props.id);\n\n      if (!region) {\n        region = regionPlug?.addRegion(props);\n      }\n\n      if (!region) return;\n\n      setRegionRef(region);\n    }\n    // eslint-disable-next-line\n  }, [waveSurfer, regionPlug]);\n\n  useRegionEvent(regionRef, \"click\", onClick);\n\n  useRegionEvent(regionRef, \"over\", onOver);\n\n  useRegionEvent(regionRef, \"leave\", onLeave);\n\n  useRegionEvent(regionRef, \"dblclick\", onDoubleClick);\n\n  useRegionPluginEvent(regionPlug, \"region-in\", onIn);\n\n  useRegionPluginEvent(regionPlug, \"region-out\", onOut);\n\n  useRegionEvent(regionRef, \"remove\", onRemove);\n\n  useRegionEvent(regionRef, \"update\", onUpdate);\n\n  useRegionEvent(regionRef, \"update-end\", onUpdateEnd);\n\n  return null;\n};\n\nexport default Region;\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,OAAOC,aAAmD,MAAM,oCAAoC;AACpG,OAAOC,cAAuC,MAAM,yBAAyB;AAC7E,OAAOC,oBAAoB,MAAM,+BAA+B;AAChE,SAASC,oBAAoB,QAAQ,mCAAmC;AACxE,OAAOC,oBAAmD,MAAM,+BAA+B;AAe/F,OAAO,MAAMC,MAAM,GAAGA,CAAC;EACrBC,MAAM;EACNC,OAAO;EACPC,OAAO;EACPC,aAAa;EACbC,IAAI;EACJC,KAAK;EACLC,QAAQ;EACRC,QAAQ;EACRC,WAAW;EACX,GAAGC;AAAK,CACI,KAAI;EAChB,MAAM,CAACC,UAAU,GAAGC,OAAO,CAAC,GAAGf,oBAAoB,EAAG;EAEtD,MAAMgB,UAAU,GAAGD,OAAO,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,YAAYpB,aAAa,CAA8B;EAE7F,MAAMqB,eAAe,GAAGvB,MAAM,CAAC,KAAK,CAAC;EAErC,MAAM,CAACwB,SAAS,EAAEC,YAAY,CAAC,GAAGxB,QAAQ,CAAkB,IAAI,CAAC;EAEjEF,SAAS,CAAC,MAAK;IACb,OAAO,MAAK;MACVyB,SAAS,EAAEE,MAAM,EAAE;IACrB,CAAC;EACH,CAAC,EAAE,CAACF,SAAS,CAAC,CAAC;EAEfzB,SAAS,CACP,MAAK;IACH;IACAyB,SAAS,EAAEG,UAAU,CAACtB,oBAAoB,CAACuB,MAAM,CAC/C,CAACC,MAAM,EAAEC,IAAI,KAAI;MACf,IAAIN,SAAS,CAACM,IAAI,CAAC,KAAKb,KAAK,CAACa,IAAI,CAAC,EAAE;QACnC,OAAO;UACL,GAAGD,MAAM;UACT,CAACC,IAAI,GAAGb,KAAK,CAACa,IAAI;SACnB;MACH;MAEA,OAAOD,MAAM;IACf,CAAC,EACD;MAAEE,EAAE,EAAEd,KAAK,CAACc;IAAE,CAAmD,CAClE,CAAC;EACJ,CAAC,EACD1B,oBAAoB,CAAC2B,GAAG,CAAEF,IAAI,IAAKb,KAAK,CAACa,IAAI,CAAC,CAAC,CAChD;EAED/B,SAAS,CAAC,MAAK;IACb,IAAI,CAACwB,eAAe,CAACU,OAAO,IAAIf,UAAU,EAAE;MAC1CK,eAAe,CAACU,OAAO,GAAG,IAAI;MAE9B,IAAIC,MAAM,GAAGd,UAAU,EAAEe,UAAU,EAAE,CAACd,IAAI,CAACe,CAAC,IAAIA,CAAC,CAACL,EAAE,KAAKd,KAAK,CAACc,EAAE,CAAC;MAElE,IAAI,CAACG,MAAM,EAAE;QACXA,MAAM,GAAGd,UAAU,EAAEiB,SAAS,CAACpB,KAAK,CAAC;MACvC;MAEA,IAAI,CAACiB,MAAM,EAAE;MAEbT,YAAY,CAACS,MAAM,CAAC;IACtB;IACA;EACF,CAAC,EAAE,CAAChB,UAAU,EAAEE,UAAU,CAAC,CAAC;EAE5BjB,cAAc,CAACqB,SAAS,EAAE,OAAO,EAAEd,OAAO,CAAC;EAE3CP,cAAc,CAACqB,SAAS,EAAE,MAAM,EAAEhB,MAAM,CAAC;EAEzCL,cAAc,CAACqB,SAAS,EAAE,OAAO,EAAEf,OAAO,CAAC;EAE3CN,cAAc,CAACqB,SAAS,EAAE,UAAU,EAAEb,aAAa,CAAC;EAEpDL,oBAAoB,CAACc,UAAU,EAAE,WAAW,EAAER,IAAI,CAAC;EAEnDN,oBAAoB,CAACc,UAAU,EAAE,YAAY,EAAEP,KAAK,CAAC;EAErDV,cAAc,CAACqB,SAAS,EAAE,QAAQ,EAAEV,QAAQ,CAAC;EAE7CX,cAAc,CAACqB,SAAS,EAAE,QAAQ,EAAET,QAAQ,CAAC;EAE7CZ,cAAc,CAACqB,SAAS,EAAE,YAAY,EAAER,WAAW,CAAC;EAEpD,OAAO,IAAI;AACb,CAAC;AAED,eAAeT,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}