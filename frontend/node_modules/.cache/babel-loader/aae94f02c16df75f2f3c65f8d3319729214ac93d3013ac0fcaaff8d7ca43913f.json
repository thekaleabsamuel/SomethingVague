{"ast":null,"code":"var _jsxFileName = \"/Users/new/Downloads/Projects/online-radio-station/src/components/SubmitPostForm.js\",\n  _s = $RefreshSig$();\n// src/components/SubmitPostForm.js\nimport React, { useState, useCallback } from 'react';\nimport axios from 'axios'; // For API calls\nimport { useDropzone } from 'react-dropzone';\nimport ReactQuill from 'react-quill'; // Rich Text Editor\nimport 'react-quill/dist/quill.snow.css'; // Default theme for Quill\nimport '.'; // Create this CSS file\n\n// --- MOCK API FUNCTIONS ---\n// ** REPLACE these with your actual API calls **\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function uploadFile(file) {\n  console.log('Uploading file:', file.name);\n  // Simulate upload delay\n  await new Promise(resolve => setTimeout(resolve, 1500));\n\n  // Create FormData to send the file\n  const formData = new FormData();\n  formData.append('file', file); // 'file' should match your backend's expected field name\n\n  try {\n    // ** REPLACE WITH YOUR ACTUAL UPLOAD ENDPOINT **\n    // const response = await axios.post('/api/upload', formData, {\n    //   headers: {\n    //     'Content-Type': 'multipart/form-data',\n    //     // Include Authorization header if needed\n    //     // 'Authorization': `Bearer ${yourAuthToken}`\n    //   }\n    // });\n    // return response.data; // Assuming backend returns { url: '...' } or { fileId: '...' }\n\n    // --- Mock Response ---\n    const mockUrl = `/uploads/mock-${Date.now()}-${file.name.replace(/\\s+/g, '_')}`;\n    console.log('Mock upload success:', mockUrl);\n    return {\n      url: mockUrl,\n      filename: file.name\n    }; // Return URL and original filename\n    // --- End Mock Response ---\n  } catch (error) {\n    console.error(\"File upload failed:\", error);\n    throw error; // Re-throw error to be caught in handleSubmit\n  }\n}\nasync function createPost(postData) {\n  console.log('Creating post with data:', postData);\n  // Simulate API delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  try {\n    // ** REPLACE WITH YOUR ACTUAL POST CREATION ENDPOINT **\n    // const response = await axios.post('/api/posts', postData, {\n    //   headers: {\n    //     // Include Authorization header if needed\n    //      // 'Authorization': `Bearer ${yourAuthToken}`\n    //   }\n    // });\n    // return response.data; // Assuming backend returns the created post object\n\n    // --- Mock Response ---\n    const mockCreatedPost = {\n      ...postData,\n      id: Date.now(),\n      createdAt: new Date().toISOString()\n    };\n    console.log('Mock post creation success:', mockCreatedPost);\n    return mockCreatedPost;\n    // --- End Mock Response ---\n  } catch (error) {\n    console.error(\"Post creation failed:\", error);\n    throw error; // Re-throw error\n  }\n}\n// --- END MOCK API FUNCTIONS ---\n\n// Quill Modules configuration (optional, customize as needed)\nconst quillModules = {\n  toolbar: [[{\n    'header': [1, 2, 3, false]\n  }], ['bold', 'italic', 'underline', 'strike', 'blockquote'], [{\n    'list': 'ordered'\n  }, {\n    'list': 'bullet'\n  }, {\n    'indent': '-1'\n  }, {\n    'indent': '+1'\n  }], ['link' /*, 'image' */],\n  // Add image button if you want direct image embeds in text\n  ['clean']]\n};\nfunction SubmitPostForm() {\n  _s();\n  const [postType, setPostType] = useState('text'); // Default type\n  const [title, setTitle] = useState('');\n  const [textContent, setTextContent] = useState('');\n  const [files, setFiles] = useState([]); // Store file objects for upload\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState(null);\n  const [successMessage, setSuccessMessage] = useState('');\n\n  // react-dropzone setup\n  const onDrop = useCallback(acceptedFiles => {\n    console.log('Accepted files:', acceptedFiles);\n    // Handle based on post type (allow multiple for slideshow, single otherwise?)\n    const maxFiles = postType === 'slideshow' ? 10 : 1; // Example limit\n    const newFiles = acceptedFiles.slice(0, maxFiles);\n\n    // Basic validation (can be more sophisticated)\n    const allowedTypes = {\n      image_text: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],\n      image_audio: ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'audio/mpeg', 'audio/ogg', 'audio/wav'],\n      video: ['video/mp4', 'video/webm', 'video/ogg'],\n      slideshow: ['image/jpeg', 'image/png', 'image/gif', 'image/webp']\n    };\n    const currentAllowed = allowedTypes[postType] || [];\n    const validFiles = newFiles.filter(file => currentAllowed.includes(file.type));\n    if (validFiles.length !== newFiles.length) {\n      setError(`Invalid file type(s) selected for ${postType} post.`);\n    } else {\n      setError(null); // Clear error if valid\n    }\n\n    // For simplicity, let's replace files for single-file types, append for slideshow\n    if (postType === 'slideshow') {\n      setFiles(prev => [...prev, ...validFiles].slice(0, maxFiles)); // Append and limit\n    } else if (validFiles.length > 0) {\n      setFiles(validFiles); // Replace\n    } else if (newFiles.length > 0 && validFiles.length === 0) {\n      // Keep showing the error set above\n    } else {\n      setFiles([]); // Clear if no valid files dropped\n    }\n  }, [postType]);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive\n  } = useDropzone({\n    onDrop,\n    accept: {\n      // Define accepted MIME types generally, filter further in onDrop\n      'image/*': ['.jpeg', '.png', '.gif', '.webp'],\n      'audio/*': ['.mp3', '.mpeg', '.ogg', '.wav'],\n      'video/*': ['.mp4', '.webm', '.ogg']\n    },\n    multiple: postType === 'slideshow' // Allow multiple only for slideshows\n  });\n  const handleTypeChange = type => {\n    setPostType(type);\n    setFiles([]); // Clear files when changing type\n    setTextContent('');\n    setTitle('');\n    setError(null);\n    setSuccessMessage('');\n  };\n  const removeFile = index => {\n    setFiles(prev => prev.filter((_, i) => i !== index));\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setIsSubmitting(true);\n    setError(null);\n    setSuccessMessage('');\n\n    // Basic Validation\n    if (!title && postType !== 'text') {\n      // Title might be optional for text posts?\n      setError('Title is required for this post type.');\n      setIsSubmitting(false);\n      return;\n    }\n    if (postType === 'text' && !textContent) {\n      setError('Text content is required for a text post.');\n      setIsSubmitting(false);\n      return;\n    }\n    if ((postType === 'image_text' || postType === 'image_audio' || postType === 'video' || postType === 'slideshow') && files.length === 0) {\n      setError('Please select or drop a file for this post type.');\n      setIsSubmitting(false);\n      return;\n    }\n    if (postType === 'image_audio' && files.length < 2 && files.filter(f => f.type.startsWith('image/')).length === 0 && files.filter(f => f.type.startsWith('audio/')).length === 0) {\n      setError('Please provide both an image and an audio file for Image + Audio post.');\n      setIsSubmitting(false);\n      return;\n    }\n    try {\n      // 1. Upload files (if any)\n      const uploadedFileData = [];\n      if (files.length > 0) {\n        // Use Promise.all to upload files concurrently (or sequentially if needed)\n        const uploadPromises = files.map(file => uploadFile(file));\n        const results = await Promise.all(uploadPromises);\n        uploadedFileData.push(...results); // results should be array of { url: '...', filename: '...' }\n        console.log(\"All files uploaded:\", uploadedFileData);\n      }\n\n      // 2. Prepare post data object for the backend\n      const postData = {\n        title,\n        type: postType,\n        text: textContent,\n        // Send even if empty, backend can decide\n        // Add file URLs/IDs based on type and uploaded data\n        imageUrl: null,\n        videoUrl: null,\n        audioUrl: null,\n        audioFilename: null,\n        imageUrls: [] // For slideshow\n      };\n\n      // Assign URLs based on uploaded files and type\n      if (postType === 'image_text' && uploadedFileData.length > 0) {\n        postData.imageUrl = uploadedFileData[0].url;\n      } else if (postType === 'video' && uploadedFileData.length > 0) {\n        postData.videoUrl = uploadedFileData[0].url;\n      } else if (postType === 'image_audio') {\n        const imageFile = uploadedFileData.find(f => f.url.includes('image')); // Crude check, improve if needed\n        const audioFile = uploadedFileData.find(f => f.url.includes('audio')); // Crude check\n        if (imageFile) postData.imageUrl = imageFile.url;\n        if (audioFile) {\n          postData.audioUrl = audioFile.url;\n          postData.audioFilename = audioFile.filename; // Store original filename for download\n        }\n      } else if (postType === 'slideshow' && uploadedFileData.length > 0) {\n        postData.imageUrls = uploadedFileData.map(f => f.url);\n      }\n\n      // 3. Create the post via API\n      const createdPost = await createPost(postData);\n      setSuccessMessage(`Post \"${createdPost.title || 'Untitled'}\" created successfully!`);\n      // Reset form\n      setTitle('');\n      setTextContent('');\n      setFiles([]);\n      // Optionally reset postType to default\n      // setPostType('text');\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(\"Submission failed:\", err);\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message || 'An error occurred during submission.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Render file previews\n  const filePreviews = files.map((file, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"file-preview\",\n    children: [file.type.startsWith('image/') ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: URL.createObjectURL(file),\n      alt: `Preview ${index}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 10\n    }, this) :\n    /*#__PURE__*/\n    // Display icon or file name for non-image files\n    _jsxDEV(\"div\", {\n      className: \"file-preview-icon\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: file.type.startsWith('audio/') ? '🎵' : file.type.startsWith('video/') ? '🎬' : '📄'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: file.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: () => removeFile(index),\n      className: \"remove-file-btn\",\n      children: \"\\xD7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 6\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"submit-post-form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create New Blog Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-type-selector\",\n      children: ['text', 'image_text', 'video', 'image_audio', 'slideshow'].map(type => /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: `type-btn ${postType === type ? 'active' : ''}`,\n        onClick: () => handleTypeChange(type),\n        children: type.replace('_', ' + ').replace(/\\b\\w/g, l => l.toUpperCase())\n      }, type, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [postType !== 'text' &&\n      /*#__PURE__*/\n      // Example: Title optional for text posts\n      _jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"title\",\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"title\",\n          value: title,\n          onChange: e => setTitle(e.target.value),\n          placeholder: \"Post Title\",\n          disabled: isSubmitting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 13\n      }, this), (postType === 'text' || postType === 'image_text' || postType === 'image_audio') && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"textContent\",\n          children: \"Content\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ReactQuill, {\n          theme: \"snow\",\n          value: textContent,\n          onChange: setTextContent,\n          modules: quillModules,\n          placeholder: \"Write your content here...\",\n          readOnly: isSubmitting\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }, this), (postType === 'image_text' || postType === 'video' || postType === 'image_audio' || postType === 'slideshow') && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: postType === 'slideshow' ? 'Images for Slideshow' : postType === 'image_audio' ? 'Image & Audio Files' : postType === 'video' ? 'Video File' : 'Image File'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ...getRootProps(),\n          className: `dropzone ${isDragActive ? 'active' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ...getInputProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 17\n          }, this), isDragActive ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Drop the files here ...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 21\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Drag 'n' drop \", postType === 'slideshow' ? 'images' : postType === 'image_audio' ? 'image/audio' : postType === 'video' ? 'a video' : 'an image', \" here, or click to select\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 14\n        }, this), files.length > 0 && /*#__PURE__*/_jsxDEV(\"aside\", {\n          className: \"file-previews-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Selected Files:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 22\n          }, this), filePreviews]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-actions\",\n        children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 21\n        }, this), successMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"success-message\",\n          children: successMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 30\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isSubmitting,\n          children: isSubmitting ? 'Submitting...' : 'Create Post'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 5\n  }, this);\n}\n_s(SubmitPostForm, \"WJx1XbD82hxvsQesNKnoNhRwhNw=\", false, function () {\n  return [useDropzone];\n});\n_c = SubmitPostForm;\nexport default SubmitPostForm;\nvar _c;\n$RefreshReg$(_c, \"SubmitPostForm\");","map":{"version":3,"names":["React","useState","useCallback","axios","useDropzone","ReactQuill","jsxDEV","_jsxDEV","uploadFile","file","console","log","name","Promise","resolve","setTimeout","formData","FormData","append","mockUrl","Date","now","replace","url","filename","error","createPost","postData","mockCreatedPost","id","createdAt","toISOString","quillModules","toolbar","SubmitPostForm","_s","postType","setPostType","title","setTitle","textContent","setTextContent","files","setFiles","isSubmitting","setIsSubmitting","setError","successMessage","setSuccessMessage","onDrop","acceptedFiles","maxFiles","newFiles","slice","allowedTypes","image_text","image_audio","video","slideshow","currentAllowed","validFiles","filter","includes","type","length","prev","getRootProps","getInputProps","isDragActive","accept","multiple","handleTypeChange","removeFile","index","_","i","handleSubmit","event","preventDefault","f","startsWith","uploadedFileData","uploadPromises","map","results","all","push","text","imageUrl","videoUrl","audioUrl","audioFilename","imageUrls","imageFile","find","audioFile","createdPost","err","_err$response","_err$response$data","response","data","message","filePreviews","className","children","src","URL","createObjectURL","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","l","toUpperCase","onSubmit","htmlFor","value","onChange","e","target","placeholder","disabled","theme","modules","readOnly","_c","$RefreshReg$"],"sources":["/Users/new/Downloads/Projects/online-radio-station/src/components/SubmitPostForm.js"],"sourcesContent":["// src/components/SubmitPostForm.js\nimport React, { useState, useCallback } from 'react';\nimport axios from 'axios'; // For API calls\nimport { useDropzone } from 'react-dropzone';\nimport ReactQuill from 'react-quill'; // Rich Text Editor\nimport 'react-quill/dist/quill.snow.css'; // Default theme for Quill\nimport '.'; // Create this CSS file\n\n// --- MOCK API FUNCTIONS ---\n// ** REPLACE these with your actual API calls **\nasync function uploadFile(file) {\n  console.log('Uploading file:', file.name);\n  // Simulate upload delay\n  await new Promise(resolve => setTimeout(resolve, 1500));\n\n  // Create FormData to send the file\n  const formData = new FormData();\n  formData.append('file', file); // 'file' should match your backend's expected field name\n\n  try {\n    // ** REPLACE WITH YOUR ACTUAL UPLOAD ENDPOINT **\n    // const response = await axios.post('/api/upload', formData, {\n    //   headers: {\n    //     'Content-Type': 'multipart/form-data',\n    //     // Include Authorization header if needed\n    //     // 'Authorization': `Bearer ${yourAuthToken}`\n    //   }\n    // });\n    // return response.data; // Assuming backend returns { url: '...' } or { fileId: '...' }\n\n    // --- Mock Response ---\n    const mockUrl = `/uploads/mock-${Date.now()}-${file.name.replace(/\\s+/g, '_')}`;\n    console.log('Mock upload success:', mockUrl);\n    return { url: mockUrl, filename: file.name }; // Return URL and original filename\n    // --- End Mock Response ---\n\n  } catch (error) {\n    console.error(\"File upload failed:\", error);\n    throw error; // Re-throw error to be caught in handleSubmit\n  }\n}\n\nasync function createPost(postData) {\n   console.log('Creating post with data:', postData);\n   // Simulate API delay\n   await new Promise(resolve => setTimeout(resolve, 1000));\n\n   try {\n     // ** REPLACE WITH YOUR ACTUAL POST CREATION ENDPOINT **\n     // const response = await axios.post('/api/posts', postData, {\n     //   headers: {\n     //     // Include Authorization header if needed\n     //      // 'Authorization': `Bearer ${yourAuthToken}`\n     //   }\n     // });\n     // return response.data; // Assuming backend returns the created post object\n\n     // --- Mock Response ---\n      const mockCreatedPost = { ...postData, id: Date.now(), createdAt: new Date().toISOString() };\n      console.log('Mock post creation success:', mockCreatedPost);\n      return mockCreatedPost;\n     // --- End Mock Response ---\n\n   } catch (error) {\n      console.error(\"Post creation failed:\", error);\n      throw error; // Re-throw error\n   }\n}\n// --- END MOCK API FUNCTIONS ---\n\n\n// Quill Modules configuration (optional, customize as needed)\nconst quillModules = {\n  toolbar: [\n    [{ 'header': [1, 2, 3, false] }],\n    ['bold', 'italic', 'underline', 'strike', 'blockquote'],\n    [{'list': 'ordered'}, {'list': 'bullet'}, {'indent': '-1'}, {'indent': '+1'}],\n    ['link' /*, 'image' */], // Add image button if you want direct image embeds in text\n    ['clean']\n  ],\n};\n\nfunction SubmitPostForm() {\n  const [postType, setPostType] = useState('text'); // Default type\n  const [title, setTitle] = useState('');\n  const [textContent, setTextContent] = useState('');\n  const [files, setFiles] = useState([]); // Store file objects for upload\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState(null);\n  const [successMessage, setSuccessMessage] = useState('');\n\n  // react-dropzone setup\n  const onDrop = useCallback(acceptedFiles => {\n    console.log('Accepted files:', acceptedFiles);\n    // Handle based on post type (allow multiple for slideshow, single otherwise?)\n    const maxFiles = postType === 'slideshow' ? 10 : 1; // Example limit\n    const newFiles = acceptedFiles.slice(0, maxFiles);\n\n    // Basic validation (can be more sophisticated)\n    const allowedTypes = {\n        image_text: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],\n        image_audio: ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'audio/mpeg', 'audio/ogg', 'audio/wav'],\n        video: ['video/mp4', 'video/webm', 'video/ogg'],\n        slideshow: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],\n    };\n\n    const currentAllowed = allowedTypes[postType] || [];\n    const validFiles = newFiles.filter(file => currentAllowed.includes(file.type));\n\n    if(validFiles.length !== newFiles.length){\n        setError(`Invalid file type(s) selected for ${postType} post.`);\n    } else {\n        setError(null); // Clear error if valid\n    }\n\n\n    // For simplicity, let's replace files for single-file types, append for slideshow\n    if (postType === 'slideshow') {\n         setFiles(prev => [...prev, ...validFiles].slice(0, maxFiles)); // Append and limit\n    } else if (validFiles.length > 0) {\n        setFiles(validFiles); // Replace\n    } else if (newFiles.length > 0 && validFiles.length === 0) {\n         // Keep showing the error set above\n    } else {\n        setFiles([]); // Clear if no valid files dropped\n    }\n\n  }, [postType]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: { // Define accepted MIME types generally, filter further in onDrop\n      'image/*': ['.jpeg', '.png', '.gif', '.webp'],\n      'audio/*': ['.mp3', '.mpeg', '.ogg', '.wav'],\n      'video/*': ['.mp4', '.webm', '.ogg']\n    },\n    multiple: postType === 'slideshow' // Allow multiple only for slideshows\n  });\n\n  const handleTypeChange = (type) => {\n    setPostType(type);\n    setFiles([]); // Clear files when changing type\n    setTextContent('');\n    setTitle('');\n    setError(null);\n    setSuccessMessage('');\n  };\n\n  const removeFile = (index) => {\n    setFiles(prev => prev.filter((_, i) => i !== index));\n  }\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setIsSubmitting(true);\n    setError(null);\n    setSuccessMessage('');\n\n    // Basic Validation\n    if (!title && postType !== 'text') { // Title might be optional for text posts?\n      setError('Title is required for this post type.');\n      setIsSubmitting(false);\n      return;\n    }\n    if (postType === 'text' && !textContent) {\n       setError('Text content is required for a text post.');\n       setIsSubmitting(false);\n       return;\n    }\n     if ((postType === 'image_text' || postType === 'image_audio' || postType === 'video' || postType === 'slideshow') && files.length === 0) {\n       setError('Please select or drop a file for this post type.');\n       setIsSubmitting(false);\n       return;\n     }\n     if(postType === 'image_audio' && files.length < 2 && files.filter(f => f.type.startsWith('image/')).length === 0 && files.filter(f => f.type.startsWith('audio/')).length === 0 ) {\n        setError('Please provide both an image and an audio file for Image + Audio post.');\n        setIsSubmitting(false);\n        return;\n     }\n\n\n    try {\n      // 1. Upload files (if any)\n      const uploadedFileData = [];\n      if (files.length > 0) {\n          // Use Promise.all to upload files concurrently (or sequentially if needed)\n          const uploadPromises = files.map(file => uploadFile(file));\n          const results = await Promise.all(uploadPromises);\n          uploadedFileData.push(...results); // results should be array of { url: '...', filename: '...' }\n          console.log(\"All files uploaded:\", uploadedFileData);\n      }\n\n      // 2. Prepare post data object for the backend\n      const postData = {\n        title,\n        type: postType,\n        text: textContent, // Send even if empty, backend can decide\n        // Add file URLs/IDs based on type and uploaded data\n        imageUrl: null,\n        videoUrl: null,\n        audioUrl: null,\n        audioFilename: null,\n        imageUrls: [], // For slideshow\n      };\n\n      // Assign URLs based on uploaded files and type\n      if (postType === 'image_text' && uploadedFileData.length > 0) {\n          postData.imageUrl = uploadedFileData[0].url;\n      } else if (postType === 'video' && uploadedFileData.length > 0) {\n           postData.videoUrl = uploadedFileData[0].url;\n      } else if (postType === 'image_audio') {\n           const imageFile = uploadedFileData.find(f => f.url.includes('image')); // Crude check, improve if needed\n           const audioFile = uploadedFileData.find(f => f.url.includes('audio')); // Crude check\n           if(imageFile) postData.imageUrl = imageFile.url;\n           if(audioFile) {\n               postData.audioUrl = audioFile.url;\n               postData.audioFilename = audioFile.filename; // Store original filename for download\n           }\n      } else if (postType === 'slideshow' && uploadedFileData.length > 0) {\n          postData.imageUrls = uploadedFileData.map(f => f.url);\n      }\n\n\n      // 3. Create the post via API\n      const createdPost = await createPost(postData);\n\n      setSuccessMessage(`Post \"${createdPost.title || 'Untitled'}\" created successfully!`);\n      // Reset form\n      setTitle('');\n      setTextContent('');\n      setFiles([]);\n      // Optionally reset postType to default\n      // setPostType('text');\n\n    } catch (err) {\n      console.error(\"Submission failed:\", err);\n      setError(err.response?.data?.message || err.message || 'An error occurred during submission.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  // Render file previews\n  const filePreviews = files.map((file, index) => (\n     <div key={index} className=\"file-preview\">\n       {file.type.startsWith('image/') ? (\n         <img src={URL.createObjectURL(file)} alt={`Preview ${index}`} />\n       ) : (\n          // Display icon or file name for non-image files\n         <div className=\"file-preview-icon\">\n            <span>{file.type.startsWith('audio/') ? '🎵' : (file.type.startsWith('video/') ? '🎬' : '📄')}</span>\n            <p>{file.name}</p>\n         </div>\n       )}\n        <button type=\"button\" onClick={() => removeFile(index)} className=\"remove-file-btn\">&times;</button>\n     </div>\n   ));\n\n\n  return (\n    <div className=\"submit-post-form-container\">\n      <h2>Create New Blog Post</h2>\n\n      {/* Post Type Selection */}\n      <div className=\"post-type-selector\">\n        {['text', 'image_text', 'video', 'image_audio', 'slideshow'].map(type => (\n          <button\n            key={type}\n            type=\"button\"\n            className={`type-btn ${postType === type ? 'active' : ''}`}\n            onClick={() => handleTypeChange(type)}\n          >\n            {/* Improve naming conventions */}\n            {type.replace('_', ' + ').replace(/\\b\\w/g, l => l.toUpperCase())}\n          </button>\n        ))}\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        {/* Title Input (conditional?) */}\n        {postType !== 'text' && ( // Example: Title optional for text posts\n            <div className=\"form-group\">\n              <label htmlFor=\"title\">Title</label>\n              <input\n                type=\"text\"\n                id=\"title\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n                placeholder=\"Post Title\"\n                disabled={isSubmitting}\n              />\n            </div>\n        )}\n\n\n        {/* Conditional Fields based on Type */}\n\n        {/* Text Content Area */}\n        {(postType === 'text' || postType === 'image_text' || postType === 'image_audio') && (\n          <div className=\"form-group\">\n            <label htmlFor=\"textContent\">Content</label>\n            <ReactQuill\n                theme=\"snow\"\n                value={textContent}\n                onChange={setTextContent}\n                modules={quillModules}\n                placeholder=\"Write your content here...\"\n                readOnly={isSubmitting}\n             />\n          </div>\n        )}\n\n        {/* File Upload / Drag & Drop Area */}\n        {(postType === 'image_text' || postType === 'video' || postType === 'image_audio' || postType === 'slideshow') && (\n          <div className=\"form-group\">\n             <label>\n                {postType === 'slideshow' ? 'Images for Slideshow' :\n                 (postType === 'image_audio' ? 'Image & Audio Files' :\n                 (postType === 'video' ? 'Video File' : 'Image File'))}\n             </label>\n             <div {...getRootProps()} className={`dropzone ${isDragActive ? 'active' : ''}`}>\n                <input {...getInputProps()} />\n                {isDragActive ? (\n                    <p>Drop the files here ...</p>\n                ) : (\n                    <p>Drag 'n' drop {postType === 'slideshow' ? 'images' : (postType === 'image_audio' ? 'image/audio' : (postType === 'video' ? 'a video' : 'an image'))} here, or click to select</p>\n                )}\n             </div>\n              {/* File Previews */}\n              {files.length > 0 && (\n                  <aside className=\"file-previews-container\">\n                     <h4>Selected Files:</h4>\n                      {filePreviews}\n                  </aside>\n              )}\n          </div>\n        )}\n\n\n        {/* Submit Button & Messages */}\n        <div className=\"form-actions\">\n          {error && <p className=\"error-message\">{error}</p>}\n          {successMessage && <p className=\"success-message\">{successMessage}</p>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            {isSubmitting ? 'Submitting...' : 'Create Post'}\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default SubmitPostForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}