{"ast":null,"code":"var _jsxFileName = \"/Users/new/Downloads/Projects/online-radio-station/src/components/Player.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { useLocation } from 'react-router-dom'; // Import useLocation\nimport playlistService from \"../services/playlistService\";\nimport '../styles/player.css'; // Keep this for the large player styles\nimport '../styles/bottomPlayerBar.css'; // Create and import this for the small player\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Player() {\n  _s();\n  const [playlist, setPlaylist] = useState([]);\n  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isPlayerReady, setIsPlayerReady] = useState(false); // Track if initial load is done\n  const audioRef = useRef(null);\n  const originalBodyStyleRef = useRef(null);\n  const location = useLocation(); // Get the current location object\n\n  // Determine if we are on the homepage\n  const isHomePage = location.pathname === '/';\n\n  // --- Hooks ---\n  useEffect(() => {\n    /* Load Playlist */\n    const tracks = playlistService.getPlaylist();\n    setPlaylist(tracks || []); // Ensure playlist is always an array\n    // Don't set isLoading to false until the first track tries to load\n  }, []);\n  useEffect(() => {\n    /* Global Background Effect */\n    // Decide if this should ONLY run on the homepage\n    if (!isHomePage || playlist.length === 0 || isLoading || currentTrackIndex < 0) {\n      // Optional: Restore original body style if navigating away from home\n      if (!isHomePage && originalBodyStyleRef.current) {\n        Object.assign(document.body.style, originalBodyStyleRef.current);\n      }\n      return; // Don't apply effect if not on home or not ready\n    }\n    const currentTrackInfo = playlist[currentTrackIndex];\n    if (!currentTrackInfo || !currentTrackInfo.artwork) return; // Safety check\n\n    const artworkUrl = process.env.PUBLIC_URL + currentTrackInfo.artwork.replace('public/', '');\n\n    // Store original styles if not already stored (only on homepage)\n    if (originalBodyStyleRef.current === null) {\n      originalBodyStyleRef.current = {\n        backgroundImage: document.body.style.backgroundImage,\n        backgroundSize: document.body.style.backgroundSize,\n        backgroundPosition: document.body.style.backgroundPosition,\n        backgroundAttachment: document.body.style.backgroundAttachment,\n        minHeight: document.body.style.minHeight\n        // transition: document.body.style.transition // Be careful storing transition\n      };\n    }\n    // Apply new styles\n    document.body.style.backgroundImage = `url(${artworkUrl})`;\n    document.body.style.backgroundSize = 'cover';\n    document.body.style.backgroundPosition = 'center center';\n    document.body.style.backgroundAttachment = 'fixed';\n    document.body.style.minHeight = '100vh';\n    document.body.style.transition = 'background-image 1s ease-in-out';\n\n    // Cleanup: Restore styles when navigating away *or* component unmounts\n    return () => {\n      if (originalBodyStyleRef.current) {\n        Object.assign(document.body.style, originalBodyStyleRef.current);\n        // Optional: Reset ref if you want it re-captured if returning to home\n        // originalBodyStyleRef.current = null;\n      }\n    };\n    // Add isHomePage to dependencies\n  }, [currentTrackIndex, playlist, isLoading, isHomePage]);\n  useEffect(() => {\n    /* Track Loading/Playback */\n    if (playlist.length === 0 || currentTrackIndex < 0) {\n      setIsLoading(true); // Set loading if no playlist/index\n      return;\n    }\n    const audio = audioRef.current;\n    if (!audio) return;\n    const track = playlist[currentTrackIndex];\n    if (!track || !track.url) {\n      console.error(\"Invalid track data:\", track);\n      setIsLoading(true);\n      return; // Skip if track data is invalid\n    }\n    setIsLoading(true); // Set loading when changing track\n    const trackUrl = process.env.PUBLIC_URL + track.url.replace('public/', '');\n\n    // Set src only if it's different\n    if (audio.src !== trackUrl) {\n      audio.src = trackUrl;\n      audio.load(); // Load the new source\n    } else if (isPlaying && audio.paused) {\n      // If src is the same but we intend to play, try playing\n      audio.play().catch(e => console.error(\"Retry play error:\", e));\n    }\n    const handleCanPlay = () => {\n      console.log(\"Audio can play:\", trackUrl);\n      setIsLoading(false); // Ready to play this track\n      setIsPlayerReady(true); // Mark that the player has loaded at least once\n      if (isPlaying) {\n        audio.play().catch(e => console.error(\"Autoplay error:\", e));\n      }\n      // Clean up this specific listener once it fires\n      audio.removeEventListener('canplay', handleCanPlay);\n    };\n    const handleEnded = () => {\n      console.log(\"Track ended\");\n      setCurrentTrackIndex(prev => (prev + 1) % playlist.length);\n      // Playback will resume via the isPlaying state in the next canplay event\n    };\n\n    // Clear previous listeners before adding new ones for this track\n    audio.removeEventListener('canplay', handleCanPlay);\n    audio.removeEventListener('ended', handleEnded);\n    audio.addEventListener('canplay', handleCanPlay);\n    audio.addEventListener('ended', handleEnded);\n    return () => {\n      // Cleanup listeners when track changes or component unmounts\n      audio.removeEventListener('canplay', handleCanPlay);\n      audio.removeEventListener('ended', handleEnded);\n    };\n    // Add isPlaying dependency: if isPlaying changes to true, we want the effect to re-run and potentially call play()\n  }, [currentTrackIndex, playlist, isPlaying]);\n  useEffect(() => {\n    /* Audio State Sync Events */\n    const audio = audioRef.current;\n    if (!audio) return;\n    const handlePlay = () => setIsPlaying(true);\n    const handlePause = () => setIsPlaying(false);\n    const handleError = e => {\n      console.error(\"Audio error:\", e);\n      setIsLoading(false); // Stop loading on error\n      setIsPlaying(false);\n      // Maybe try next track?\n      // setCurrentTrackIndex(prev => (prev + 1) % playlist.length);\n    };\n\n    // Set initial state based on audio element (covers browser controls)\n    setIsPlaying(!audio.paused);\n    audio.addEventListener('play', handlePlay);\n    audio.addEventListener('pause', handlePause);\n    audio.addEventListener('error', handleError);\n    return () => {\n      // Cleanup on unmount\n      audio.removeEventListener('play', handlePlay);\n      audio.removeEventListener('pause', handlePause);\n      audio.removeEventListener('error', handleError);\n    };\n  }, [playlist.length]); // Re-attach if playlist changes fundamentally (though unlikely needed)\n\n  // --- Control Functions ---\n  const togglePlay = () => {\n    const audio = audioRef.current;\n    if (!audio || playlist.length === 0 || isLoading) return; // Don't toggle if loading or no playlist\n\n    if (audio.paused) {\n      // We set isPlaying to true, the effect hook will handle the actual audio.play()\n      setIsPlaying(true);\n      audio.play().catch(error => {\n        console.error(\"Playback error:\", error);\n        setIsPlaying(false);\n      }); // Also try direct play\n    } else {\n      audio.pause();\n      setIsPlaying(false); // Immediately reflect pause intent\n    }\n  };\n  const rewind15Seconds = () => {\n    const audio = audioRef.current;\n    if (audio) {\n      audio.currentTime = Math.max(0, audio.currentTime - 15);\n    }\n  };\n\n  // --- Render Logic ---\n\n  // Always render the audio tag - THIS IS KEY FOR PERSISTENCE\n  const audioTag = /*#__PURE__*/_jsxDEV(\"audio\", {\n    ref: audioRef,\n    preload: \"metadata\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 22\n  }, this);\n\n  // Don't render *any* UI until the player has loaded *something*\n  if (!isPlayerReady) {\n    // Optionally show a minimal global loading state or nothing\n    console.log(\"Player not ready yet.\");\n    return audioTag; // Return only the audio tag initially\n    // Or: return <>{audioTag} <div className=\"initial-loading\">Loading Radio...</div></>;\n  }\n\n  // We have a playlist and player is ready, get current track info\n  const currentTrackInfo = playlist[currentTrackIndex];\n  if (!currentTrackInfo) {\n    console.log(\"No current track info available.\");\n    // Handle case where index might be invalid temporarily\n    return audioTag; // Or a \"Playlist empty\" message\n  }\n  const artworkUrl = currentTrackInfo.artwork ? process.env.PUBLIC_URL + currentTrackInfo.artwork.replace('public/', '') : '/default-artwork.png'; // Fallback\n\n  // --- Conditional UI Rendering ---\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [audioTag, \" \", isHomePage ?\n    /*#__PURE__*/\n    // --- Render Centered Player UI on HomePage ---\n    _jsxDEV(\"div\", {\n      className: \"player-ui-container\",\n      children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-overlay\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 35\n      }, this) /* Optional loading inside */, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-artwork\",\n        style: {\n          backgroundImage: `url(${artworkUrl})`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-track-details\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: currentTrackInfo.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 25\n        }, this), currentTrackInfo.artist && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: currentTrackInfo.artist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 53\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-controls-centered\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: rewind15Seconds,\n          disabled: isLoading,\n          className: \"control-button rewind-button\",\n          \"aria-label\": \"Rewind 15 seconds\",\n          children: \"\\u21BA15\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: togglePlay,\n          disabled: isLoading,\n          className: \"control-button play-pause-main\",\n          \"aria-label\": isPlaying ? \"Pause\" : \"Play\",\n          children: isLoading ? '...' : isPlaying ? '❙❙' : '▶'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-button-placeholder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 17\n    }, this) :\n    /*#__PURE__*/\n    // --- Render Bottom Player Bar on Other Pages ---\n    _jsxDEV(\"div\", {\n      className: \"bottom-player-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: artworkUrl,\n        alt: \"\",\n        className: \"bottom-player-artwork\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom-player-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom-player-title\",\n          children: currentTrackInfo.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 25\n        }, this), currentTrackInfo.artist && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bottom-player-artist\",\n          children: currentTrackInfo.artist\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 53\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bottom-player-controls\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: togglePlay,\n          disabled: isLoading,\n          className: \"bottom-player-playpause\",\n          \"aria-label\": isPlaying ? \"Pause\" : \"Play\",\n          children: isLoading ? '...' : isPlaying ? '❙❙' : '▶'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n}\n_s(Player, \"KhQUkHxdvK7LtpuGaa8k7YEqP6I=\", false, function () {\n  return [useLocation];\n});\n_c = Player;\nexport default Player;\nvar _c;\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useLocation","playlistService","jsxDEV","_jsxDEV","Fragment","_Fragment","Player","_s","playlist","setPlaylist","currentTrackIndex","setCurrentTrackIndex","isPlaying","setIsPlaying","isLoading","setIsLoading","isPlayerReady","setIsPlayerReady","audioRef","originalBodyStyleRef","location","isHomePage","pathname","tracks","getPlaylist","length","current","Object","assign","document","body","style","currentTrackInfo","artwork","artworkUrl","process","env","PUBLIC_URL","replace","backgroundImage","backgroundSize","backgroundPosition","backgroundAttachment","minHeight","transition","audio","track","url","console","error","trackUrl","src","load","paused","play","catch","e","handleCanPlay","log","removeEventListener","handleEnded","prev","addEventListener","handlePlay","handlePause","handleError","togglePlay","pause","rewind15Seconds","currentTime","Math","max","audioTag","ref","preload","fileName","_jsxFileName","lineNumber","columnNumber","children","className","title","artist","onClick","disabled","alt","_c","$RefreshReg$"],"sources":["/Users/new/Downloads/Projects/online-radio-station/src/components/Player.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { useLocation } from 'react-router-dom'; // Import useLocation\nimport playlistService from \"../services/playlistService\";\nimport '../styles/player.css'; // Keep this for the large player styles\nimport '../styles/bottomPlayerBar.css'; // Create and import this for the small player\n\nfunction Player() {\n    const [playlist, setPlaylist] = useState([]);\n    const [currentTrackIndex, setCurrentTrackIndex] = useState(0);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const [isPlayerReady, setIsPlayerReady] = useState(false); // Track if initial load is done\n    const audioRef = useRef(null);\n    const originalBodyStyleRef = useRef(null);\n    const location = useLocation(); // Get the current location object\n\n    // Determine if we are on the homepage\n    const isHomePage = location.pathname === '/';\n\n    // --- Hooks ---\n    useEffect(() => { /* Load Playlist */\n        const tracks = playlistService.getPlaylist();\n        setPlaylist(tracks || []); // Ensure playlist is always an array\n        // Don't set isLoading to false until the first track tries to load\n    }, []);\n\n    useEffect(() => { /* Global Background Effect */\n        // Decide if this should ONLY run on the homepage\n        if (!isHomePage || playlist.length === 0 || isLoading || currentTrackIndex < 0) {\n            // Optional: Restore original body style if navigating away from home\n             if (!isHomePage && originalBodyStyleRef.current) {\n                 Object.assign(document.body.style, originalBodyStyleRef.current);\n             }\n            return; // Don't apply effect if not on home or not ready\n        }\n\n        const currentTrackInfo = playlist[currentTrackIndex];\n        if (!currentTrackInfo || !currentTrackInfo.artwork) return; // Safety check\n\n        const artworkUrl = process.env.PUBLIC_URL + currentTrackInfo.artwork.replace('public/', '');\n\n        // Store original styles if not already stored (only on homepage)\n        if (originalBodyStyleRef.current === null) {\n             originalBodyStyleRef.current = {\n                backgroundImage: document.body.style.backgroundImage,\n                backgroundSize: document.body.style.backgroundSize,\n                backgroundPosition: document.body.style.backgroundPosition,\n                backgroundAttachment: document.body.style.backgroundAttachment,\n                minHeight: document.body.style.minHeight,\n                // transition: document.body.style.transition // Be careful storing transition\n            };\n        }\n        // Apply new styles\n        document.body.style.backgroundImage = `url(${artworkUrl})`;\n        document.body.style.backgroundSize = 'cover';\n        document.body.style.backgroundPosition = 'center center';\n        document.body.style.backgroundAttachment = 'fixed';\n        document.body.style.minHeight = '100vh';\n        document.body.style.transition = 'background-image 1s ease-in-out';\n\n        // Cleanup: Restore styles when navigating away *or* component unmounts\n        return () => {\n             if (originalBodyStyleRef.current) {\n                 Object.assign(document.body.style, originalBodyStyleRef.current);\n                 // Optional: Reset ref if you want it re-captured if returning to home\n                 // originalBodyStyleRef.current = null;\n             }\n         };\n    // Add isHomePage to dependencies\n    }, [currentTrackIndex, playlist, isLoading, isHomePage]);\n\n    useEffect(() => { /* Track Loading/Playback */\n        if (playlist.length === 0 || currentTrackIndex < 0) {\n            setIsLoading(true); // Set loading if no playlist/index\n            return;\n        }\n\n        const audio = audioRef.current; if (!audio) return;\n        const track = playlist[currentTrackIndex];\n        if (!track || !track.url) {\n            console.error(\"Invalid track data:\", track);\n            setIsLoading(true);\n            return; // Skip if track data is invalid\n        }\n\n        setIsLoading(true); // Set loading when changing track\n        const trackUrl = process.env.PUBLIC_URL + track.url.replace('public/', '');\n\n        // Set src only if it's different\n        if (audio.src !== trackUrl) {\n            audio.src = trackUrl;\n            audio.load(); // Load the new source\n        } else if (isPlaying && audio.paused) {\n             // If src is the same but we intend to play, try playing\n            audio.play().catch(e => console.error(\"Retry play error:\", e));\n        }\n\n\n        const handleCanPlay = () => {\n            console.log(\"Audio can play:\", trackUrl);\n            setIsLoading(false); // Ready to play this track\n            setIsPlayerReady(true); // Mark that the player has loaded at least once\n             if (isPlaying) {\n                 audio.play().catch(e => console.error(\"Autoplay error:\", e));\n             }\n             // Clean up this specific listener once it fires\n             audio.removeEventListener('canplay', handleCanPlay);\n        };\n\n         const handleEnded = () => {\n            console.log(\"Track ended\");\n            setCurrentTrackIndex(prev => (prev + 1) % playlist.length);\n            // Playback will resume via the isPlaying state in the next canplay event\n        };\n\n        // Clear previous listeners before adding new ones for this track\n        audio.removeEventListener('canplay', handleCanPlay);\n        audio.removeEventListener('ended', handleEnded);\n\n        audio.addEventListener('canplay', handleCanPlay);\n        audio.addEventListener('ended', handleEnded);\n\n\n        return () => { // Cleanup listeners when track changes or component unmounts\n            audio.removeEventListener('canplay', handleCanPlay);\n            audio.removeEventListener('ended', handleEnded);\n        };\n    // Add isPlaying dependency: if isPlaying changes to true, we want the effect to re-run and potentially call play()\n    }, [currentTrackIndex, playlist, isPlaying]);\n\n\n    useEffect(() => { /* Audio State Sync Events */\n        const audio = audioRef.current; if (!audio) return;\n\n        const handlePlay = () => setIsPlaying(true);\n        const handlePause = () => setIsPlaying(false);\n        const handleError = (e) => {\n            console.error(\"Audio error:\", e);\n            setIsLoading(false); // Stop loading on error\n            setIsPlaying(false);\n            // Maybe try next track?\n            // setCurrentTrackIndex(prev => (prev + 1) % playlist.length);\n        };\n\n        // Set initial state based on audio element (covers browser controls)\n        setIsPlaying(!audio.paused);\n\n        audio.addEventListener('play', handlePlay);\n        audio.addEventListener('pause', handlePause);\n        audio.addEventListener('error', handleError);\n\n        return () => { // Cleanup on unmount\n            audio.removeEventListener('play', handlePlay);\n            audio.removeEventListener('pause', handlePause);\n            audio.removeEventListener('error', handleError);\n        };\n    }, [playlist.length]); // Re-attach if playlist changes fundamentally (though unlikely needed)\n\n    // --- Control Functions ---\n    const togglePlay = () => {\n        const audio = audioRef.current;\n        if (!audio || playlist.length === 0 || isLoading) return; // Don't toggle if loading or no playlist\n\n        if (audio.paused) {\n             // We set isPlaying to true, the effect hook will handle the actual audio.play()\n            setIsPlaying(true);\n            audio.play().catch(error => { console.error(\"Playback error:\", error); setIsPlaying(false); }); // Also try direct play\n        } else {\n            audio.pause();\n            setIsPlaying(false); // Immediately reflect pause intent\n        }\n    };\n\n    const rewind15Seconds = () => {\n        const audio = audioRef.current;\n        if (audio) {\n            audio.currentTime = Math.max(0, audio.currentTime - 15);\n        }\n    };\n\n    // --- Render Logic ---\n\n    // Always render the audio tag - THIS IS KEY FOR PERSISTENCE\n    const audioTag = <audio ref={audioRef} preload=\"metadata\" />;\n\n    // Don't render *any* UI until the player has loaded *something*\n     if (!isPlayerReady) {\n         // Optionally show a minimal global loading state or nothing\n         console.log(\"Player not ready yet.\");\n         return audioTag; // Return only the audio tag initially\n         // Or: return <>{audioTag} <div className=\"initial-loading\">Loading Radio...</div></>;\n     }\n\n    // We have a playlist and player is ready, get current track info\n    const currentTrackInfo = playlist[currentTrackIndex];\n    if (!currentTrackInfo) {\n        console.log(\"No current track info available.\");\n        // Handle case where index might be invalid temporarily\n        return audioTag; // Or a \"Playlist empty\" message\n    }\n    const artworkUrl = currentTrackInfo.artwork\n        ? process.env.PUBLIC_URL + currentTrackInfo.artwork.replace('public/', '')\n        : '/default-artwork.png'; // Fallback\n\n\n    // --- Conditional UI Rendering ---\n    return (\n        <>\n            {audioTag} {/* Audio tag is always rendered */}\n\n            {isHomePage ? (\n                // --- Render Centered Player UI on HomePage ---\n                <div className=\"player-ui-container\">\n                    {isLoading && <div className=\"loading-overlay\">Loading...</div> /* Optional loading inside */}\n                    <div\n                        className=\"player-artwork\"\n                        style={{ backgroundImage: `url(${artworkUrl})` }}\n                    ></div>\n                    <div className=\"player-track-details\">\n                        <h2>{currentTrackInfo.title}</h2>\n                        {currentTrackInfo.artist && <p>{currentTrackInfo.artist}</p>}\n                    </div>\n                    <div className=\"player-controls-centered\">\n                        <button onClick={rewind15Seconds} disabled={isLoading} className=\"control-button rewind-button\" aria-label=\"Rewind 15 seconds\">\n                            ↺15\n                        </button>\n                        <button onClick={togglePlay} disabled={isLoading} className=\"control-button play-pause-main\" aria-label={isPlaying ? \"Pause\" : \"Play\"}>\n                            {isLoading ? '...' : (isPlaying ? '❙❙' : '▶')}\n                        </button>\n                        <div className=\"control-button-placeholder\"></div>\n                    </div>\n                </div>\n            ) : (\n                // --- Render Bottom Player Bar on Other Pages ---\n                <div className=\"bottom-player-bar\">\n                    <img src={artworkUrl} alt=\"\" className=\"bottom-player-artwork\" />\n                    <div className=\"bottom-player-info\">\n                        <div className=\"bottom-player-title\">{currentTrackInfo.title}</div>\n                        {currentTrackInfo.artist && <div className=\"bottom-player-artist\">{currentTrackInfo.artist}</div>}\n                    </div>\n                    <div className=\"bottom-player-controls\">\n                         {/* Add rewind? next? previous? */}\n                        <button onClick={togglePlay} disabled={isLoading} className=\"bottom-player-playpause\" aria-label={isPlaying ? \"Pause\" : \"Play\"}>\n                             {isLoading ? '...' : (isPlaying ? '❙❙' : '▶')}\n                        </button>\n                    </div>\n                </div>\n            )}\n        </>\n    );\n}\n\nexport default Player;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}