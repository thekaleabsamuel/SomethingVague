{"ast":null,"code":"var _jsxFileName = \"/Users/new/Downloads/Projects/online-radio-station/src/pages/Blog.js\",\n  _s = $RefreshSig$();\n// src/pages/Blog.js\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useInView } from 'react-intersection-observer';\nimport BlogPost from '../components/BlogPost'; // Import the post component\nimport '../styles/blogPage.css'; // Create this CSS file\n\n// --- MOCK API FUNCTION ---\n// Replace this with your actual API call using fetch or axios\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function fetchBlogPosts(page = 1, limit = 10) {\n  console.log(`Workspaceing page ${page}...`);\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // ** REPLACE THIS WITH YOUR ACTUAL API CALL **\n  // Example: const response = await fetch(`/api/posts?page=${page}&limit=${limit}`);\n  // const data = await response.json();\n  // return data; // Should return { posts: [...], hasMore: boolean }\n\n  // --- Mock Data Generation ---\n  const totalPosts = 50; // Example total\n  const posts = [];\n  const startId = (page - 1) * limit + 1;\n  const endId = Math.min(startId + limit - 1, totalPosts);\n  if (startId > totalPosts) {\n    return {\n      posts: [],\n      hasMore: false\n    }; // No more posts\n  }\n  for (let i = startId; i <= endId; i++) {\n    // Cycle through post types for variety\n    const typeIndex = i % 5;\n    let postData = {\n      id: i,\n      title: `Blog Post ${i}`\n    };\n    if (typeIndex === 0) {\n      // Image + Text\n      postData = {\n        ...postData,\n        type: 'image_text',\n        imageUrl: `https://picsum.photos/seed/${i}/600/400`,\n        text: `<p>This is the content for blog post number ${i}. It includes some <strong>bold text</strong> and an image above.</p><p>Lorem ipsum dolor sit amet consectetur adipisicing elit.</p>`\n      };\n    } else if (typeIndex === 1) {\n      // Video (use a placeholder)\n      // Replace with real video URLs when you have them\n      postData = {\n        ...postData,\n        type: 'video',\n        videoUrl: 'https://www.w3schools.com/html/mov_bbb.mp4'\n      }; // Placeholder video\n    } else if (typeIndex === 2) {\n      // Image + Audio\n      // Replace with real audio URLs and filenames\n      postData = {\n        ...postData,\n        type: 'image_audio',\n        imageUrl: `https://picsum.photos/seed/${i + 100}/600/300`,\n        audioUrl: '/placeholder-audio.mp3',\n        /* Create a dummy mp3 in public folder */audioFilename: `cool_track_${i}.mp3`,\n        text: `<p>Listen to this track below. Image included too!</p>`\n      };\n    } else if (typeIndex === 3) {\n      // Text only\n      postData = {\n        ...postData,\n        type: 'text',\n        text: `<p>This is a text-only post (number ${i}). Ideal for short updates or thoughts.</p><ul><li>Point 1</li><li>Point 2</li></ul>`\n      };\n    } else {\n      // Slideshow\n      postData = {\n        ...postData,\n        type: 'slideshow',\n        imageUrls: [`https://picsum.photos/seed/${i + 200}/500/350`, `https://picsum.photos/seed/${i + 300}/500/350`, `https://picsum.photos/seed/${i + 400}/500/350`]\n      };\n    }\n    posts.push(postData);\n  }\n  const hasMore = endId < totalPosts;\n  console.log('Returning:', {\n    posts,\n    hasMore\n  });\n  return {\n    posts,\n    hasMore\n  };\n  // --- End Mock Data ---\n}\n// --- END MOCK API FUNCTION ---\n\nfunction Blog() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const initialLoadDone = useRef(false); // Prevent effect trigger on initial mount interaction\n\n  // `ref` from useInView will be attached to the loader element\n  // `inView` will be true when the element is visible\n  const {\n    ref,\n    inView\n  } = useInView({\n    threshold: 0 // Trigger as soon as the element enters the viewport\n    // triggerOnce: false // Keep observing\n  });\n  const loadMorePosts = useCallback(async () => {\n    if (loading || !hasMore) return; // Don't load if already loading or no more posts\n\n    setLoading(true);\n    try {\n      // Pass the *next* page number to fetch\n      const nextPage = page; // Use current page state\n      const data = await fetchBlogPosts(nextPage, 5); // Fetch 5 posts per page (adjust limit)\n\n      // Important: Filter out duplicate posts if any overlap occurs\n      // (Might happen with rapid scrolling, though less likely with IntersectionObserver)\n      const newPosts = data.posts.filter(newPost => !posts.some(existingPost => existingPost.id === newPost.id));\n      setPosts(prevPosts => [...prevPosts, ...newPosts]);\n      setHasMore(data.hasMore);\n      if (data.hasMore) {\n        setPage(prevPage => prevPage + 1); // Increment page number *after* successful fetch\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch posts:\", error);\n      // Handle error state if needed\n    } finally {\n      setLoading(false);\n    }\n  }, [page, loading, hasMore, posts]); // Include posts in dependencies if filtering duplicates\n\n  // Effect for initial load\n  useEffect(() => {\n    loadMorePosts();\n    initialLoadDone.current = true; // Mark initial load as done\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Run only once on mount\n\n  // Effect to load more when the trigger element (ref) is in view\n  useEffect(() => {\n    // Only load more if the trigger is in view, it's not already loading,\n    // there are more posts, AND the initial load has completed.\n    if (inView && !loading && hasMore && initialLoadDone.current) {\n      loadMorePosts();\n    }\n  }, [inView, loading, hasMore, loadMorePosts]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blog-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"blog-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Something Vague *Blog*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"updates and insights\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blog-posts-container\",\n      children: [posts.map(post => /*#__PURE__*/_jsxDEV(BlogPost, {\n        post: post\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)), hasMore && /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: ref,\n        className: \"loader-trigger\",\n        children: loading && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading more posts...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }, this), !loading && !hasMore && posts.length > 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"end-of-posts-message\",\n        children: \"You've reached the end!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }, this), !loading && !hasMore && posts.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No posts found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n_s(Blog, \"7HIhnYO9eEvSLC/7c/UUIMZ0SiM=\", false, function () {\n  return [useInView];\n});\n_c = Blog;\nexport default Blog;\nvar _c;\n$RefreshReg$(_c, \"Blog\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useInView","BlogPost","jsxDEV","_jsxDEV","fetchBlogPosts","page","limit","console","log","Promise","resolve","setTimeout","totalPosts","posts","startId","endId","Math","min","hasMore","i","typeIndex","postData","id","title","type","imageUrl","text","videoUrl","audioUrl","audioFilename","imageUrls","push","Blog","_s","setPosts","setPage","loading","setLoading","setHasMore","initialLoadDone","ref","inView","threshold","loadMorePosts","nextPage","data","newPosts","filter","newPost","some","existingPost","prevPosts","prevPage","error","current","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","post","length","_c","$RefreshReg$"],"sources":["/Users/new/Downloads/Projects/online-radio-station/src/pages/Blog.js"],"sourcesContent":["// src/pages/Blog.js\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useInView } from 'react-intersection-observer';\nimport BlogPost from '../components/BlogPost'; // Import the post component\nimport '../styles/blogPage.css'; // Create this CSS file\n\n// --- MOCK API FUNCTION ---\n// Replace this with your actual API call using fetch or axios\nasync function fetchBlogPosts(page = 1, limit = 10) {\n  console.log(`Workspaceing page ${page}...`);\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // ** REPLACE THIS WITH YOUR ACTUAL API CALL **\n  // Example: const response = await fetch(`/api/posts?page=${page}&limit=${limit}`);\n  // const data = await response.json();\n  // return data; // Should return { posts: [...], hasMore: boolean }\n\n  // --- Mock Data Generation ---\n  const totalPosts = 50; // Example total\n  const posts = [];\n  const startId = (page - 1) * limit + 1;\n  const endId = Math.min(startId + limit - 1, totalPosts);\n\n  if (startId > totalPosts) {\n    return { posts: [], hasMore: false }; // No more posts\n  }\n\n  for (let i = startId; i <= endId; i++) {\n     // Cycle through post types for variety\n     const typeIndex = i % 5;\n     let postData = { id: i, title: `Blog Post ${i}` };\n\n     if (typeIndex === 0) { // Image + Text\n        postData = { ...postData, type: 'image_text', imageUrl: `https://picsum.photos/seed/${i}/600/400`, text: `<p>This is the content for blog post number ${i}. It includes some <strong>bold text</strong> and an image above.</p><p>Lorem ipsum dolor sit amet consectetur adipisicing elit.</p>` };\n     } else if (typeIndex === 1) { // Video (use a placeholder)\n        // Replace with real video URLs when you have them\n        postData = { ...postData, type: 'video', videoUrl: 'https://www.w3schools.com/html/mov_bbb.mp4' }; // Placeholder video\n     } else if (typeIndex === 2) { // Image + Audio\n         // Replace with real audio URLs and filenames\n         postData = { ...postData, type: 'image_audio', imageUrl: `https://picsum.photos/seed/${i+100}/600/300`, audioUrl: '/placeholder-audio.mp3', /* Create a dummy mp3 in public folder */ audioFilename: `cool_track_${i}.mp3`, text: `<p>Listen to this track below. Image included too!</p>`};\n     } else if (typeIndex === 3) { // Text only\n         postData = { ...postData, type: 'text', text: `<p>This is a text-only post (number ${i}). Ideal for short updates or thoughts.</p><ul><li>Point 1</li><li>Point 2</li></ul>`};\n     } else { // Slideshow\n          postData = { ...postData, type: 'slideshow', imageUrls: [`https://picsum.photos/seed/${i+200}/500/350`, `https://picsum.photos/seed/${i+300}/500/350`, `https://picsum.photos/seed/${i+400}/500/350`] };\n     }\n    posts.push(postData);\n  }\n  const hasMore = endId < totalPosts;\n  console.log('Returning:', { posts, hasMore });\n  return { posts, hasMore };\n  // --- End Mock Data ---\n}\n// --- END MOCK API FUNCTION ---\n\n\nfunction Blog() {\n  const [posts, setPosts] = useState([]);\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const initialLoadDone = useRef(false); // Prevent effect trigger on initial mount interaction\n\n  // `ref` from useInView will be attached to the loader element\n  // `inView` will be true when the element is visible\n  const { ref, inView } = useInView({\n     threshold: 0, // Trigger as soon as the element enters the viewport\n     // triggerOnce: false // Keep observing\n  });\n\n\n  const loadMorePosts = useCallback(async () => {\n    if (loading || !hasMore) return; // Don't load if already loading or no more posts\n\n    setLoading(true);\n    try {\n        // Pass the *next* page number to fetch\n      const nextPage = page; // Use current page state\n      const data = await fetchBlogPosts(nextPage, 5); // Fetch 5 posts per page (adjust limit)\n\n       // Important: Filter out duplicate posts if any overlap occurs\n       // (Might happen with rapid scrolling, though less likely with IntersectionObserver)\n       const newPosts = data.posts.filter(newPost =>\n            !posts.some(existingPost => existingPost.id === newPost.id)\n       );\n\n      setPosts(prevPosts => [...prevPosts, ...newPosts]);\n      setHasMore(data.hasMore);\n      if(data.hasMore) {\n        setPage(prevPage => prevPage + 1); // Increment page number *after* successful fetch\n      }\n\n    } catch (error) {\n      console.error(\"Failed to fetch posts:\", error);\n      // Handle error state if needed\n    } finally {\n      setLoading(false);\n    }\n  }, [page, loading, hasMore, posts]); // Include posts in dependencies if filtering duplicates\n\n\n   // Effect for initial load\n   useEffect(() => {\n     loadMorePosts();\n     initialLoadDone.current = true; // Mark initial load as done\n     // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, []); // Run only once on mount\n\n\n  // Effect to load more when the trigger element (ref) is in view\n  useEffect(() => {\n     // Only load more if the trigger is in view, it's not already loading,\n     // there are more posts, AND the initial load has completed.\n    if (inView && !loading && hasMore && initialLoadDone.current) {\n      loadMorePosts();\n    }\n  }, [inView, loading, hasMore, loadMorePosts]);\n\n\n  return (\n    <div className=\"blog-page\">\n      <header className=\"blog-header\">\n          <h1>Something Vague *Blog*</h1>\n          <p>updates and insights</p>\n      </header>\n\n      <div className=\"blog-posts-container\">\n        {posts.map((post) => (\n          <BlogPost key={post.id} post={post} />\n        ))}\n\n        {/* Loader/Trigger Element */}\n        {/* The ref is attached here. When this div scrolls into view, `inView` becomes true. */}\n        {hasMore && (\n            <div ref={ref} className=\"loader-trigger\">\n                {loading && <p>Loading more posts...</p>}\n            </div>\n        )}\n\n        {!loading && !hasMore && posts.length > 0 && (\n            <p className=\"end-of-posts-message\">You've reached the end!</p>\n        )}\n\n         {!loading && !hasMore && posts.length === 0 && (\n             <p>No posts found.</p>\n         )}\n      </div>\n    </div>\n  );\n}\n\nexport default Blog;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}