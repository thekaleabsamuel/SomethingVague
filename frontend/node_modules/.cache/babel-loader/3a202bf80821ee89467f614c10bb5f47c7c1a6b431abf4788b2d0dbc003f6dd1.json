{"ast":null,"code":"import { useEffect, useRef, useState } from \"react\";\nimport createWavesurfer from \"../utils/createWavesurfer\";\nimport createPlugin from \"../utils/createPlugin\";\nimport getDifference from \"../utils/getDifference\";\nfunction createPluginsMap(curr, plugins) {\n  const result = {};\n  const stack = [...plugins];\n  while (stack.length >= 1) {\n    const node = stack.shift();\n    const hasThisPluginAlready = !!curr[node.key];\n    if (hasThisPluginAlready) {\n      result[node.key] = curr[node.key];\n    } else {\n      result[node.key] = createPlugin(node);\n    }\n  }\n  return result;\n}\nexport default function useWavesurfer({\n  container,\n  plugins = [],\n  onMount,\n  ...props\n}) {\n  const isInitilizing$ = useRef(false);\n  const [pluginsMap, setPluginsMap] = useState({});\n  // is used to keep track of initialized plugins\n  const initialized$ = useRef([]);\n  const [wavesurfer, setWavesurfer] = useState(null);\n  useEffect(() => {\n    if (!container) return;\n    // keep track of container\n    const prevContainer = container;\n    // do not allot to create WaveSurfer instance twice\n    if (isInitilizing$.current) return;\n    isInitilizing$.current = true;\n    const _plugins = createPluginsMap(pluginsMap, plugins);\n    initialized$.current = Object.keys(_plugins);\n    const ws = createWavesurfer({\n      container,\n      ...props,\n      plugins: Object.values(_plugins)\n    });\n    onMount?.(ws);\n    setPluginsMap(_plugins);\n    setWavesurfer(ws);\n    return () => {\n      // if container did not changed, but useEffect is still called,\n      // prevent destroy if container or all-others hook dependencies are not changed\n      if (prevContainer === container) return;\n      ws.destroy();\n    };\n  }, [container]);\n  useEffect(() => {\n    if (wavesurfer) {\n      const _plugins = createPluginsMap(pluginsMap, plugins);\n      const {\n        disabled,\n        enabled\n      } = getDifference(pluginsMap, _plugins);\n      // destroy plugin, wavesurfer self removes it from plugin array\n      Object.keys(disabled).forEach(plugKey => {\n        disabled[plugKey].destroy();\n      });\n      Object.keys(enabled).forEach(pluginKey => {\n        // do not initialize plugin under the same key twice or more times\n        if (initialized$.current.includes(pluginKey)) return;\n        console.log('register plugin', pluginKey, enabled[pluginKey]);\n        wavesurfer?.registerPlugin(enabled[pluginKey]);\n      });\n      // register only enabled plugins\n      initialized$.current = Object.keys(enabled);\n      setPluginsMap(_plugins);\n    }\n  }, [plugins]);\n  return [wavesurfer, pluginsMap, Object.values(pluginsMap)];\n}","map":{"version":3,"names":["useEffect","useRef","useState","createWavesurfer","createPlugin","getDifference","createPluginsMap","curr","plugins","result","stack","length","node","shift","hasThisPluginAlready","key","useWavesurfer","container","onMount","props","isInitilizing$","pluginsMap","setPluginsMap","initialized$","wavesurfer","setWavesurfer","prevContainer","current","_plugins","Object","keys","ws","values","destroy","disabled","enabled","forEach","plugKey","pluginKey","includes","console","log","registerPlugin"],"sources":["/Users/new/Downloads/Projects/online-radio-station/node_modules/wavesurfer-react/src/hooks/useWavesurfer.ts"],"sourcesContent":["import {useEffect, useRef, useState} from \"react\";\nimport { GenericPlugin } from \"wavesurfer.js/dist/base-plugin\";\nimport createWavesurfer, {WaveSurfer as WaveSurferRef, WaveSurfer} from \"../utils/createWavesurfer\";\nimport createPlugin from \"../utils/createPlugin\";\nimport getDifference from \"../utils/getDifference\";\nimport { PluginType } from \"../types\";\n\nexport type UseWaveSurferParams<GPlug extends GenericPlugin> = {\n    container?: string | HTMLElement,\n    plugins: PluginType<GPlug>[],\n    onMount: (wavesurferRef: null | WaveSurferRef) => any\n};\n\nexport type PluginDictionary<GPlug extends GenericPlugin> = Record<string, GPlug>;\n\n\nfunction createPluginsMap<GPlug extends GenericPlugin>(curr: PluginDictionary<GPlug>, plugins: PluginType<GPlug>[]): PluginDictionary<GPlug> {\n    const result: PluginDictionary<GPlug> = {};\n\n    const stack = [...plugins];\n\n    while (stack.length >= 1) {\n        const node = stack.shift()!;\n\n        const hasThisPluginAlready = !!curr[node.key];\n\n        if (hasThisPluginAlready) {\n            result[node.key] = curr[node.key]!;\n        } else {\n            result[node.key] = createPlugin(node);\n        }\n    }\n\n    return result;\n}\n\nexport default function useWavesurfer<GPlug extends GenericPlugin>({ container, plugins = [], onMount, ...props }: UseWaveSurferParams<GPlug>) {\n    const isInitilizing$ = useRef<boolean>(false);\n\n    const [pluginsMap, setPluginsMap] = useState<PluginDictionary<GPlug>>({});\n    // is used to keep track of initialized plugins\n    const initialized$ = useRef<string[]>([]);\n\n    const [wavesurfer, setWavesurfer] = useState<WaveSurfer | null>(null);\n\n    useEffect(() => {\n        if (!container) return;\n\n        // keep track of container\n        const prevContainer = container;\n\n        // do not allot to create WaveSurfer instance twice\n        if (isInitilizing$.current) return;\n        isInitilizing$.current = true;\n\n\n        const _plugins = createPluginsMap(pluginsMap, plugins);\n\n        initialized$.current = Object.keys(_plugins);\n\n        const ws = createWavesurfer({\n            container,\n            ...props,\n            plugins: Object.values(_plugins),\n        })\n\n        onMount?.(ws);\n\n        setPluginsMap(_plugins);\n        setWavesurfer(ws);\n\n        return () => {\n            // if container did not changed, but useEffect is still called,\n            // prevent destroy if container or all-others hook dependencies are not changed\n            if (prevContainer === container) return;\n            ws.destroy();\n        };\n    }, [container]);\n\n    useEffect(() => {\n        if (wavesurfer) {\n            const _plugins = createPluginsMap(pluginsMap, plugins);\n\n            const { disabled, enabled } = getDifference(\n              pluginsMap,\n              _plugins\n            );\n\n            // destroy plugin, wavesurfer self removes it from plugin array\n            Object.keys(disabled).forEach(plugKey => {\n                disabled[plugKey]!.destroy();\n            })\n\n            Object.keys(enabled).forEach((pluginKey) => {\n                // do not initialize plugin under the same key twice or more times\n                if (initialized$.current.includes(pluginKey)) return;\n\n                console.log('register plugin', pluginKey, enabled[pluginKey]);\n\n                wavesurfer?.registerPlugin(enabled[pluginKey]!);\n            });\n\n            // register only enabled plugins\n            initialized$.current = Object.keys(enabled);\n\n            setPluginsMap(_plugins);\n        }\n    }, [plugins]);\n\n    return [wavesurfer as WaveSurfer, pluginsMap, Object.values(pluginsMap)] as const;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}