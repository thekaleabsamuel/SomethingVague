{"ast":null,"code":"var _jsxFileName = \"/Users/new/Downloads/Projects/online-radio-station/frontend/src/context/AudioContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioContext = /*#__PURE__*/createContext();\nexport const AudioProvider = ({\n  children\n}) => {\n  _s();\n  const [playlist, setPlaylist] = useState([]);\n  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const audioRef = useRef(null);\n\n  // Initialize audio element\n  useEffect(() => {\n    if (!audioRef.current) {\n      audioRef.current = new Audio();\n      audioRef.current.crossOrigin = 'anonymous';\n    }\n\n    // Set up audio event listeners\n    audioRef.current.onloadedmetadata = () => {\n      setDuration(audioRef.current.duration);\n    };\n    audioRef.current.ontimeupdate = () => {\n      setProgress(audioRef.current.currentTime);\n    };\n    audioRef.current.onended = () => {\n      handleNextTrack();\n    };\n\n    // Cleanup\n    return () => {\n      if (audioRef.current) {\n        audioRef.current.pause();\n        audioRef.current = null;\n      }\n    };\n  }, []);\n\n  // Fetch playlist\n  useEffect(() => {\n    const fetchPlaylist = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          throw new Error('No authentication token found');\n        }\n        const response = await fetch('http://localhost:5002/api/radio/tracks', {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (!response.ok) {\n          if (response.status === 401) {\n            // Token is invalid or expired\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            throw new Error('Session expired. Please log in again.');\n          }\n          throw new Error(`Failed to fetch tracks: ${response.statusText}`);\n        }\n        const data = await response.json();\n        setPlaylist(data);\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error fetching playlist:', error);\n        setError(error.message);\n        setIsLoading(false);\n      }\n    };\n    fetchPlaylist();\n  }, []);\n\n  // Handle track changes\n  useEffect(() => {\n    if (playlist.length > 0 && currentTrackIndex >= 0) {\n      const currentTrack = playlist[currentTrackIndex];\n      if (!currentTrack) return;\n      const loadTrack = async () => {\n        try {\n          setIsLoading(true);\n          setError(null);\n          const audioUrl = getAbsolutePath(currentTrack.url);\n          audioRef.current.src = audioUrl;\n          if (isPlaying) {\n            audioRef.current.play();\n          }\n          setIsLoading(false);\n        } catch (err) {\n          console.error('Error loading track:', err);\n          setError('Error loading track');\n          setIsLoading(false);\n        }\n      };\n      loadTrack();\n    }\n  }, [currentTrackIndex, playlist]);\n  const handlePlayPause = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n    } else {\n      audioRef.current.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n  const handleNextTrack = () => {\n    setCurrentTrackIndex(prevIndex => (prevIndex + 1) % playlist.length);\n  };\n  const handlePreviousTrack = () => {\n    setCurrentTrackIndex(prevIndex => prevIndex === 0 ? playlist.length - 1 : prevIndex - 1);\n  };\n  const getAbsolutePath = relativePath => {\n    return new URL(relativePath, window.location.origin).href;\n  };\n  const value = {\n    playlist,\n    currentTrackIndex,\n    isPlaying,\n    progress,\n    duration,\n    error,\n    isLoading,\n    currentTrack: playlist[currentTrackIndex],\n    handlePlayPause,\n    handleNextTrack,\n    handlePreviousTrack,\n    audioRef\n  };\n  return /*#__PURE__*/_jsxDEV(AudioContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioProvider, \"xm5nesHwQ6G23EaebM0mkzty8pA=\");\n_c = AudioProvider;\nexport const useAudio = () => {\n  _s2();\n  const context = useContext(AudioContext);\n  if (!context) {\n    throw new Error('useAudio must be used within an AudioProvider');\n  }\n  return context;\n};\n_s2(useAudio, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AudioContext;\nvar _c;\n$RefreshReg$(_c, \"AudioProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useRef","useEffect","jsxDEV","_jsxDEV","AudioContext","AudioProvider","children","_s","playlist","setPlaylist","currentTrackIndex","setCurrentTrackIndex","isPlaying","setIsPlaying","progress","setProgress","duration","setDuration","error","setError","isLoading","setIsLoading","audioRef","current","Audio","crossOrigin","onloadedmetadata","ontimeupdate","currentTime","onended","handleNextTrack","pause","fetchPlaylist","token","localStorage","getItem","Error","response","fetch","headers","ok","status","removeItem","statusText","data","json","console","message","length","currentTrack","loadTrack","audioUrl","getAbsolutePath","url","src","play","err","handlePlayPause","prevIndex","handlePreviousTrack","relativePath","URL","window","location","origin","href","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAudio","_s2","context","$RefreshReg$"],"sources":["/Users/new/Downloads/Projects/online-radio-station/frontend/src/context/AudioContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useRef, useEffect } from 'react';\n\nconst AudioContext = createContext();\n\nexport const AudioProvider = ({ children }) => {\n  const [playlist, setPlaylist] = useState([]);\n  const [currentTrackIndex, setCurrentTrackIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const audioRef = useRef(null);\n\n  // Initialize audio element\n  useEffect(() => {\n    if (!audioRef.current) {\n      audioRef.current = new Audio();\n      audioRef.current.crossOrigin = 'anonymous';\n    }\n\n    // Set up audio event listeners\n    audioRef.current.onloadedmetadata = () => {\n      setDuration(audioRef.current.duration);\n    };\n\n    audioRef.current.ontimeupdate = () => {\n      setProgress(audioRef.current.currentTime);\n    };\n\n    audioRef.current.onended = () => {\n      handleNextTrack();\n    };\n\n    // Cleanup\n    return () => {\n      if (audioRef.current) {\n        audioRef.current.pause();\n        audioRef.current = null;\n      }\n    };\n  }, []);\n\n  // Fetch playlist\n  useEffect(() => {\n    const fetchPlaylist = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          throw new Error('No authentication token found');\n        }\n\n        const response = await fetch('http://localhost:5002/api/radio/tracks', {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n\n        if (!response.ok) {\n          if (response.status === 401) {\n            // Token is invalid or expired\n            localStorage.removeItem('token');\n            localStorage.removeItem('user');\n            throw new Error('Session expired. Please log in again.');\n          }\n          throw new Error(`Failed to fetch tracks: ${response.statusText}`);\n        }\n\n        const data = await response.json();\n        setPlaylist(data);\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error fetching playlist:', error);\n        setError(error.message);\n        setIsLoading(false);\n      }\n    };\n\n    fetchPlaylist();\n  }, []);\n\n  // Handle track changes\n  useEffect(() => {\n    if (playlist.length > 0 && currentTrackIndex >= 0) {\n      const currentTrack = playlist[currentTrackIndex];\n      if (!currentTrack) return;\n\n      const loadTrack = async () => {\n        try {\n          setIsLoading(true);\n          setError(null);\n\n          const audioUrl = getAbsolutePath(currentTrack.url);\n          audioRef.current.src = audioUrl;\n\n          if (isPlaying) {\n            audioRef.current.play();\n          }\n\n          setIsLoading(false);\n        } catch (err) {\n          console.error('Error loading track:', err);\n          setError('Error loading track');\n          setIsLoading(false);\n        }\n      };\n\n      loadTrack();\n    }\n  }, [currentTrackIndex, playlist]);\n\n  const handlePlayPause = () => {\n    if (isPlaying) {\n      audioRef.current.pause();\n    } else {\n      audioRef.current.play();\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  const handleNextTrack = () => {\n    setCurrentTrackIndex((prevIndex) => (prevIndex + 1) % playlist.length);\n  };\n\n  const handlePreviousTrack = () => {\n    setCurrentTrackIndex((prevIndex) => \n      prevIndex === 0 ? playlist.length - 1 : prevIndex - 1\n    );\n  };\n\n  const getAbsolutePath = (relativePath) => {\n    return new URL(relativePath, window.location.origin).href;\n  };\n\n  const value = {\n    playlist,\n    currentTrackIndex,\n    isPlaying,\n    progress,\n    duration,\n    error,\n    isLoading,\n    currentTrack: playlist[currentTrackIndex],\n    handlePlayPause,\n    handleNextTrack,\n    handlePreviousTrack,\n    audioRef\n  };\n\n  return (\n    <AudioContext.Provider value={value}>\n      {children}\n    </AudioContext.Provider>\n  );\n};\n\nexport const useAudio = () => {\n  const context = useContext(AudioContext);\n  if (!context) {\n    throw new Error('useAudio must be used within an AudioProvider');\n  }\n  return context;\n};\n\nexport default AudioContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}